window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pycharmm", "modulename": "pycharmm", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycharmm.atom_info", "modulename": "pycharmm.atom_info", "kind": "module", "doc": "<p>Consists of functions that fetch the residue, segment, chem type, etc. for atoms in a selection.</p>\n"}, {"fullname": "pycharmm.atom_info.get_chem_types", "modulename": "pycharmm.atom_info", "qualname": "get_chem_types", "kind": "function", "doc": "<p>Get the chemical types for each atom index.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>atom_indexes</strong> (list[int]):\nList of atom indexes</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[str]</strong>: A list of the chem_type (str) for each atom index</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atom_indexes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.atom_info.atom_to_res", "modulename": "pycharmm.atom_info", "qualname": "atom_to_res", "kind": "function", "doc": "<p>Get the residue index of all the atoms in the system.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[int]</strong>: A list of residue indexes of the size of the number of atoms</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.atom_info.get_res_indexes", "modulename": "pycharmm.atom_info", "qualname": "get_res_indexes", "kind": "function", "doc": "<p>Get the residue index for select atoms.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>atom_indexes</strong> (list[int]):\nA list of atom indexes</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[int]</strong>: List of residue indexes, one for each of <code>atom_indexes</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atom_indexes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.atom_info.get_res_names", "modulename": "pycharmm.atom_info", "qualname": "get_res_names", "kind": "function", "doc": "<p>Get the residue name for each atom index.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>atom_indexes</strong> (list[int]):\nA list of atom indexes</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[str]</strong>: A list of residue names (str), one for each atom index</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atom_indexes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.atom_info.get_res_ids", "modulename": "pycharmm.atom_info", "qualname": "get_res_ids", "kind": "function", "doc": "<p>Get the residue id for each atom index.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>atom_indexes</strong> (list[int]):\nA list of atom indexes</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[str]</strong>: A list of residue ids (str), one for each atom index</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atom_indexes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.atom_info.atom_to_seg", "modulename": "pycharmm.atom_info", "qualname": "atom_to_seg", "kind": "function", "doc": "<p>Map atom indexes to seg indexes; used by <code>get_seg_indexes()</code>.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[int]</strong>: The segment index for all atoms</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.atom_info.get_seg_indexes", "modulename": "pycharmm.atom_info", "qualname": "get_seg_indexes", "kind": "function", "doc": "<p>Get the segment index for each atom index.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>atom_indexes</strong> (list[int]):\nA list of atom indexes</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[int]</strong>: A list of segment indexes (int), one for each atom index</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atom_indexes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.atom_info.get_seg_ids", "modulename": "pycharmm.atom_info", "qualname": "get_seg_ids", "kind": "function", "doc": "<p>Get the segment id (string) for each atom index.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>atom_indexes</strong> (list[int]):\nA list of atom indexes</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[str]</strong>: A list of segment ids, one for each atom index</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atom_indexes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.atom_info.get_atom_types", "modulename": "pycharmm.atom_info", "qualname": "get_atom_types", "kind": "function", "doc": "<p>Get the atom name for each atom index.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>atom_indexes</strong> (list[int]):\na list of atom indexes</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[str]</strong>: a list of atom types (str), one for each atom index</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atom_indexes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.atom_info.AtomInfo", "modulename": "pycharmm.atom_info", "qualname": "AtomInfo", "kind": "class", "doc": "<p>Collect all the information stored in CHARMM about an atom index.</p>\n"}, {"fullname": "pycharmm.atom_info.AtomInfo.__init__", "modulename": "pycharmm.atom_info", "qualname": "AtomInfo.__init__", "kind": "function", "doc": "<p>Retrieve all info for atom atom_index</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<p>atom_index : int \n    you're interested in the info for the atom with this index</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atom_index</span></span>)</span>"}, {"fullname": "pycharmm.atom_info.AtomInfo.update", "modulename": "pycharmm.atom_info", "qualname": "AtomInfo.update", "kind": "function", "doc": "<p>Refill the info for this atom from CHARMM.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.atom_info.get_atom_table", "modulename": "pycharmm.atom_info", "qualname": "get_atom_table", "kind": "function", "doc": "<p>Get a table of (atom index) X (chem type, res name, seg id) for atoms in a selection.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>selection</strong> (pycharmm.SelectAtoms):\nfill table for only these atoms, all atoms if None</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: a data frame with info for each atom</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker", "modulename": "pycharmm.cdocker", "kind": "module", "doc": "<p>Functions for standard CDOCKER calcualtion</p>\n\n<p>Created by Yujin Wu (wyujin@umich.edu)</p>\n\n<p>See CHARMM documentation <a href=\"https://academiccharmm.org/documentation/version/c47b1\">openmm_dock</a>\nand <a href=\"https://academiccharmm.org/documentation/version/c47b1/grid\">GRID</a>\nfor more information</p>\n\n<h1 id=\"functions\">Functions</h1>\n\n<ul>\n<li><code>calc_dihedral</code> -- calculate dihedral angles for a given four position</li>\n<li><code>rand_rot_trans</code> -- random translate and rotate of the ligand</li>\n<li><code>FACTS_rescore</code> -- FACTS rescoring of docked poses</li>\n<li><code>RCDOCKER_init_place</code> -- rigid CDOCKER original initial placement</li>\n<li><code>RCDOCKER_fast_init_place</code> -- rigid CDOCKER fast initial placement</li>\n<li><code>FCDOCKER_init_place</code> -- flexible CDOCKER initial placement</li>\n<li><code>FCDOCKER_fast_init_place</code> -- flexible CDOCKER fast initial placement</li>\n<li><code>FCDOCKER_mutation</code> -- mutation in the genetic algorithm in flexible CDOCKER</li>\n<li><code>FCDOCKER_crossover</code> -- crossover in the genetic algorithm in flexible CDOCKER</li>\n<li><code>FCDOCKER_calc_dihedral</code> -- calculate dihedral angles in flexible CDOCKER</li>\n<li><code>default_ommd_sian</code> -- default simulated annealing algorithm</li>\n<li><code>cluster_mmtsb</code> -- clustering with mmtsb cluster.pl</li>\n<li><code>scan_cluster_radius</code> -- find best cluster radius</li>\n<li><code>rcdocker_default_sort</code> -- default rigid cdocker sort method</li>\n<li><code>top_N_cluster</code> -- find top N cluster result</li>\n<li><code>Rigid_CDOCKER</code> -- standard rigid CDOCKER docking method</li>\n<li><code>Flexible_CDOCKER</code> -- standard flexible CDOCKER docking method</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>Import <code>Rigid_CDOCKER</code> module to perform rigid CDOCKER using the standard protocol</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">pycharmm.cdocker</span> <span class=\"kn\">import</span> <span class=\"n\">Rigid_CDOCKER</span>\n</code></pre>\n</div>\n\n<p>With default input, users only need to provide grid box information</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Rigid_CDOCKER</span><span class=\"p\">(</span><span class=\"n\">xcen</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ycen</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">zcen</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">maxlen</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Import <code>Flexible_CDOCKER</code> to perform flexible CDOCKER using the standard protocol</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">pycharmm.cdocker</span> <span class=\"kn\">import</span> <span class=\"n\">Flexible_CDOCKER</span>\n</code></pre>\n</div>\n\n<p>With default input, users only need to provide grid box information and flexible side chain selection</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">flex</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;res_id&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">84</span><span class=\"p\">,</span> <span class=\"mi\">87</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">111</span><span class=\"p\">,</span> <span class=\"mi\">118</span><span class=\"p\">],</span> <span class=\"s1\">&#39;seg_id&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;PROT&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;PROT&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;PROT&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;PROT&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;PROT&#39;</span><span class=\"p\">]}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">flexchain</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">flex</span><span class=\"p\">)</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">flexchain</span><span class=\"p\">)</span>\n<span class=\"go\">   res_id seg_id</span>\n<span class=\"go\">0      84   PROT</span>\n<span class=\"go\">1      87   PROT</span>\n<span class=\"go\">2      99   PROT</span>\n<span class=\"go\">3     111   PROT</span>\n<span class=\"go\">4     118   PROT</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Flexible_CDOCKER</span><span class=\"p\">(</span><span class=\"n\">xcen</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ycen</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">zcen</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">maxlen</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">flexchain</span> <span class=\"o\">=</span> <span class=\"n\">flexchain</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.cdocker.calc_dihedral", "modulename": "pycharmm.cdocker", "qualname": "calc_dihedral", "kind": "function", "doc": "<p>Calculate dihedral angle entropy contribution </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>xyz</strong> (numpy 4 by 3 array):\n4 points in xyz-coordinates</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: dihedral angles in degree</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xyz</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.rand_rot_trans", "modulename": "pycharmm.cdocker", "qualname": "rand_rot_trans", "kind": "function", "doc": "<p>Random rotation and translation of the ligand</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>xyz</strong> (np.array):\nn by 3 array (i.e., xyz coordinates)</li>\n<li><strong>max_rot</strong> (float):\nmaximum rotation angle (in radian)</li>\n<li><strong>max_trans</strong> (float):\nmaximum translation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.array</strong>: new ligand xyz coordinates</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xyz</span>, </span><span class=\"param\"><span class=\"n\">max_rot</span><span class=\"o\">=</span><span class=\"mf\">3.141592653589793</span>, </span><span class=\"param\"><span class=\"n\">max_trans</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.FACTS_rescore", "modulename": "pycharmm.cdocker", "qualname": "FACTS_rescore", "kind": "function", "doc": "<p>Default FACTS docking rescore method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fixAtomSel</strong> (pycharmm.SelectAtoms):\nfixed atoms that undergoes FACTS implicit solvent minimization</li>\n<li><strong>steps</strong> (int):\nnumber of minimization steps</li>\n<li><strong>tolgrd</strong> (float):\nminimization tolerance (exit thresold)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>facts_ener</strong> (float):\nFACTS implicit solvent energy</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fixAtomSel</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">1000</span>, </span><span class=\"param\"><span class=\"n\">tolgrd</span><span class=\"o\">=</span><span class=\"mf\">0.001</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.RCDOCKER_init_place", "modulename": "pycharmm.cdocker", "qualname": "RCDOCKER_init_place", "kind": "function", "doc": "<p>Rigid CDOCKER original initial placement</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ligPDB</strong> (str):\nligand pdb file name</li>\n<li><strong>ligSeg</strong> (str):\nligand segment ID</li>\n<li><strong>hardGridFile</strong> (str):\nhard grid file name</li>\n<li><strong>nativeGridFile</strong> (str):\nnative grid file name</li>\n<li><strong>confDir</strong> (str):\nconformer folder name</li>\n<li><strong>placementDir</strong> (str):\nplacement folder name</li>\n<li><strong>flag_center_ligand</strong> (bool):\nwhether ligand needed to be centered or not</li>\n<li><strong>flag_use_hbond</strong> (bool):\nwhether hydrogen bond is used in ligand initial placement</li>\n<li><strong>flag_form</strong> (bool):\nwhether or not the grid file is formatted</li>\n<li><strong>flag_rdie</strong> (bool):\ntrue for rdie, false for cdie</li>\n<li><strong>dielec</strong> (float):\ndielectric constant</li>\n<li><strong>xcen</strong> (float):\ncenter of the docking pocket</li>\n<li><strong>ycen</strong> (float):\ncenter of the docking pocket</li>\n<li><strong>zcen</strong> (float):\ncenter of the docking pocket</li>\n<li><strong>numPlace</strong> (int):\nnumber of placement for each conformer</li>\n<li><strong>threshold</strong> (float):\nthreshold for energy cutoff</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: number of conformers</li>\n<li><strong>numPlace</strong> (int):\nnumber of placement for each conformer</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ligPDB</span><span class=\"o\">=</span><span class=\"s1\">&#39;./ligand.pdb&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ligSeg</span><span class=\"o\">=</span><span class=\"s1\">&#39;LIGA&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hardGridFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid-emax-3-mine--30-maxe-30.bin&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">nativeGridFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid-emax-100-mine--100-maxe-100.bin&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">confDir</span><span class=\"o\">=</span><span class=\"s1\">&#39;./conformer&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">placementDir</span><span class=\"o\">=</span><span class=\"s1\">&#39;./placement&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">flag_center_ligand</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flag_use_hbond</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flag_form</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">flag_rdie</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dielec</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">xcen</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ycen</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">zcen</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">numPlace</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">2500</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.RCDOCKER_fast_init_place", "modulename": "pycharmm.cdocker", "qualname": "RCDOCKER_fast_init_place", "kind": "function", "doc": "<p>Rigid CDOCKER fast initial placement</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>receptorPDB</strong> (str):\nprotein pdb file name</li>\n<li><strong>receptorPSF</strong> (str):\nprotein psf file name</li>\n<li><strong>ligPDB</strong> (str):\nligand pdb file name</li>\n<li><strong>ligSeg</strong> (str):\nligand segment ID</li>\n<li><strong>confDir</strong> (str):\nconformer folder name</li>\n<li><strong>placementDir</strong> (str):\nplacement folder name</li>\n<li><strong>exhaustiveness</strong> (str):\nexhaustiveness for fast placement, high, medium, low</li>\n<li><strong>flag_center_ligand</strong> (bool):\nwhether or not ligand need to be centered</li>\n<li><strong>xcen</strong> (float):\ncenter of the docking pocket</li>\n<li><strong>ycen</strong> (float):\ncenter of the docking pocket</li>\n<li><strong>zcen</strong> (float):\ncenter of the docking pocket</li>\n<li><strong>numPlace</strong> (int):\nnumber of placement for each conformer</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: number of conformers</li>\n<li><strong>numPlace</strong> (int):\nnumber of placement for each cnoformer</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">receptorPDB</span><span class=\"o\">=</span><span class=\"s1\">&#39;./protein.pdb&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">receptorPSF</span><span class=\"o\">=</span><span class=\"s1\">&#39;./protein.psf&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ligPDB</span><span class=\"o\">=</span><span class=\"s1\">&#39;./ligand.pdb&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ligSeg</span><span class=\"o\">=</span><span class=\"s1\">&#39;LIGA&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">confDir</span><span class=\"o\">=</span><span class=\"s1\">&#39;./conformer/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">placementDir</span><span class=\"o\">=</span><span class=\"s1\">&#39;./placement/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">exhaustiveness</span><span class=\"o\">=</span><span class=\"s1\">&#39;high&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">flag_center_ligand</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">xcen</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ycen</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">zcen</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">numPlace</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.FCDOCKER_init_place", "modulename": "pycharmm.cdocker", "qualname": "FCDOCKER_init_place", "kind": "function", "doc": "<p>Flexible CDOCKER initial placement</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>receptorCard</strong> (str):\nreceptor coordinate card</li>\n<li><strong>receptorSel</strong> (str):\nreceptor selection</li>\n<li><strong>flexSel</strong> (str):\nflexible part selection</li>\n<li><strong>ligSel</strong> (str):\nligand selection</li>\n<li><strong>ligPDB</strong> (str):\nligand pdb file name</li>\n<li><strong>ligSeg</strong> (str):\nligand segment ID</li>\n<li><strong>hardGridFile</strong> (str):\nhard grid file name</li>\n<li><strong>nativeGridFile</strong> (str):\nnative grid file name</li>\n<li><strong>placementDir</strong> (str):\nplacement folder name</li>\n<li><strong>num</strong> (int):\nnumber of conformer</li>\n<li><strong>copy</strong> (int):\nnumber of copies for each conformer</li>\n<li><strong>threshold</strong> (float):\nthreshold for energy cutoff</li>\n<li><strong>flag_form</strong> (bool):\nwhether or not the grid file is formatted</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: number of docking trials</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">receptorCard</span><span class=\"o\">=</span><span class=\"s1\">&#39;./flexchain.crd&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">receptorSel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">flexSel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ligSel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ligPDB</span><span class=\"o\">=</span><span class=\"s1\">&#39;./ligand.pdb&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ligSeg</span><span class=\"o\">=</span><span class=\"s1\">&#39;LIGA&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hardGridFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid-emax-3-mine--30-maxe-30.bin&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">nativeGridFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid-emax-100-mine--100-maxe-100.bin&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">placementDir</span><span class=\"o\">=</span><span class=\"s1\">&#39;./placement/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">copy</span><span class=\"o\">=</span><span class=\"mi\">25</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">2500</span>,</span><span class=\"param\">\t<span class=\"n\">flag_form</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.FCDOCKER_fast_init_place", "modulename": "pycharmm.cdocker", "qualname": "FCDOCKER_fast_init_place", "kind": "function", "doc": "<p>Rigid CDOCKER fast initial placement</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>receptorPDB</strong> (str):\nprotein pdb file name</li>\n<li><strong>receptorPSF</strong> (str):\nprotein psf file name</li>\n<li><strong>ligPDB</strong> (str):\nligand pdb file name</li>\n<li><strong>ligSeg</strong> (str):\nligand segment ID</li>\n<li><strong>placementDir</strong> (str):\nplacement folder name</li>\n<li><strong>exhaustiveness</strong> (str):\nexhaustiveness for fast placement, high, medium, low</li>\n<li><strong>num</strong> (int):\nnumber of conformer</li>\n<li><strong>copy</strong> (int):\nnumber of copies for each conformer</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: number of docking trials</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">receptorPDB</span><span class=\"o\">=</span><span class=\"s1\">&#39;./protein.pdb&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">receptorPSF</span><span class=\"o\">=</span><span class=\"s1\">&#39;./protein.psf&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ligPDB</span><span class=\"o\">=</span><span class=\"s1\">&#39;./ligand.pdb&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ligSeg</span><span class=\"o\">=</span><span class=\"s1\">&#39;LIGA&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">placementDir</span><span class=\"o\">=</span><span class=\"s1\">&#39;./placement/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">exhaustiveness</span><span class=\"o\">=</span><span class=\"s1\">&#39;high&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">copy</span><span class=\"o\">=</span><span class=\"mi\">25</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.FCDOCKER_mutation", "modulename": "pycharmm.cdocker", "qualname": "FCDOCKER_mutation", "kind": "function", "doc": "<p>Mutation in flexible CDOCKER genetic algorithm</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>final_result</strong> (np.array):\nanalyzed clustering result</li>\n<li><strong>pair_list</strong> (np.array):\npair list of the crossover result</li>\n<li><strong>receptorSel</strong> (str):\nreceptor selection</li>\n<li><strong>flexSel</strong> (str):\nflexible part selection</li>\n<li><strong>ligSel</strong> (str):\nligand selection</li>\n<li><strong>ligPDB</strong> (str):\nligand pdb file name</li>\n<li><strong>ligSeg</strong> (str):\nligand segment ID</li>\n<li><strong>saveLig</strong> (str):\nligand docked result saved folder name</li>\n<li><strong>saveProt</strong> (str):\nprotein docked result saved folder name</li>\n<li><strong>crossoverLig</strong> (str):\ncrossover ligand folder before mutation</li>\n<li><strong>crossoverProt</strong> (str):\ncrossover protein folder before mutation</li>\n<li><strong>hardGridFile</strong> (str):\nhard grid file name</li>\n<li><strong>nativeGridFile</strong> (str):\nnative grid file name</li>\n<li><strong>placementDir</strong> (str):\nplacement folder after mutation</li>\n<li><strong>num</strong> (float):\nnumber of conformer</li>\n<li><strong>copy</strong> (float):\nnumber of copies for each conformer</li>\n<li><strong>threshold</strong> (float):\nthreshold for energy cutoff</li>\n<li><strong>flag_form</strong> (bool):\nwhether or not the grid file is formatted</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: number of docking trials</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">final_result</span>,</span><span class=\"param\">\t<span class=\"n\">pair_list</span>,</span><span class=\"param\">\t<span class=\"n\">receptorSel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">flexSel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ligSel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ligPDB</span><span class=\"o\">=</span><span class=\"s1\">&#39;./ligand.pdb&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ligSeg</span><span class=\"o\">=</span><span class=\"s1\">&#39;LIGA&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">saveLig</span><span class=\"o\">=</span><span class=\"s1\">&#39;./ligand/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">saveProt</span><span class=\"o\">=</span><span class=\"s1\">&#39;./protein/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">crossoverLig</span><span class=\"o\">=</span><span class=\"s1\">&#39;./r_ligand/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">crossoverProt</span><span class=\"o\">=</span><span class=\"s1\">&#39;./r_protein/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hardGridFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid-emax-3-mine--30-maxe-30.bin&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">nativeGridFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid-emax-100-mine--100-maxe-100.bin&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">placementDir</span><span class=\"o\">=</span><span class=\"s1\">&#39;./placement/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">copy</span><span class=\"o\">=</span><span class=\"mi\">25</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">flag_form</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.FCDOCKER_crossover", "modulename": "pycharmm.cdocker", "qualname": "FCDOCKER_crossover", "kind": "function", "doc": "<p>Crossover in flexible CDOCKER genetic algorithm</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cluster_result</strong> (np.array):\nclustering result using MMTSB</li>\n<li><strong>dock_result</strong> (np.array):\ndocking results with grid energy recorded</li>\n<li><strong>num</strong> (float):\nnumber of conformer</li>\n<li><strong>copy</strong> (float):\nnumber of copies for each conformer</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>final_result</strong> (np.array):\nanalyzed clustering result</li>\n<li><strong>np.array</strong>: pair list of the crossover result</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cluster_result</span>, </span><span class=\"param\"><span class=\"n\">dock_result</span>, </span><span class=\"param\"><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">20</span>, </span><span class=\"param\"><span class=\"n\">copy</span><span class=\"o\">=</span><span class=\"mi\">25</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.FCDOCKER_calc_dihedral", "modulename": "pycharmm.cdocker", "qualname": "FCDOCKER_calc_dihedral", "kind": "function", "doc": "<p>Calculate dihedral angle and corresponding entropy in flexible docking</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>flexchain</strong> (pd.DataFrame):\ndataframe of the flexchain selection</li>\n<li><strong>cluster_result</strong> (np.array):\nclustering result using MMTSB</li>\n<li><strong>saveProt</strong> (str):\nprotein docked result saved folder name</li>\n<li><strong>protein_dihedral</strong> (pd.DataFrame):\nprotein dihedral angle look up table</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>entropy</strong> (np.array):\nentropy for each cluster</li>\n<li><strong>np.array</strong>: cluster ID</li>\n<li><strong>sc_entropy</strong> (np.array):\nentropy for each cluster &amp; each amino acid</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">flexchain</span>, </span><span class=\"param\"><span class=\"n\">cluster_result</span>, </span><span class=\"param\"><span class=\"n\">saveProt</span>, </span><span class=\"param\"><span class=\"n\">protein_dihedral</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.default_ommd_sian", "modulename": "pycharmm.cdocker", "qualname": "default_ommd_sian", "kind": "function", "doc": "<p>Default OpenMM docking simulated annealing </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ommd</strong> (pycharmm.grid.OMMD):\nOpenMM docking system</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True for success</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ommd</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.cluster_mmtsb", "modulename": "pycharmm.cdocker", "qualname": "cluster_mmtsb", "kind": "function", "doc": "<p>Use MMTSB to perfrom clustering (cluster.pl)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>radius</strong> (float):\nclustering radius</li>\n<li><strong>name</strong> (str):\nname of the ligand pdbs</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>message</strong> (str):\nclustering results</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.scan_cluster_radius", "modulename": "pycharmm.cdocker", "qualname": "scan_cluster_radius", "kind": "function", "doc": "<p>Find the best clustering radius\nDefault use in rigid CDOCKER</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong> (str):\nname of the ligand pdbs</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>radius</strong> (float):\nbest clustering radius</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.rcdocker_default_sort", "modulename": "pycharmm.cdocker", "qualname": "rcdocker_default_sort", "kind": "function", "doc": "<p>Rigid CDOCKER default sorting methods</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>radius</strong> (float):\nclustering radius</li>\n<li><strong>name</strong> (str):\nname of the ligand pdbs</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.array</strong>: clustering result</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.sort_cluster", "modulename": "pycharmm.cdocker", "qualname": "sort_cluster", "kind": "function", "doc": "<p>Sort clustering results</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pdb_files</strong> (np.array):\npdb names of docked poses</li>\n<li><strong>dock_result</strong> (pd.DataFrame):\ndocking results (i.e., energy)</li>\n<li><strong>sort_method</strong> (str):\nsorting based on sort_method</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tmpResult</strong> (pd.DataFrame):\nsorted results</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pdb_files</span>, </span><span class=\"param\"><span class=\"n\">dock_result</span>, </span><span class=\"param\"><span class=\"n\">sort_method</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.top_N_cluster", "modulename": "pycharmm.cdocker", "qualname": "top_N_cluster", "kind": "function", "doc": "<p>Get top N largest clusters</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>logFile</strong> (str):\ncluster log file</li>\n<li><strong>N</strong> (int):\nnumber of large cluster identified</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.array</strong>: sorted top N cluster results</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;cluster.log&#39;</span>, </span><span class=\"param\"><span class=\"n\">N</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">500</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.Rigid_CDOCKER", "modulename": "pycharmm.cdocker", "qualname": "Rigid_CDOCKER", "kind": "function", "doc": "<p>Rigid CDOCKER standard docking method </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>xcen</strong> (float):\ncenter of the docking pocket</li>\n<li><strong>ycen</strong> (float):\ncenter of the docking pocket</li>\n<li><strong>zcen</strong> (float):\ncenter of the docking pocket</li>\n<li><strong>maxlen</strong> (float):\nsize of the grid box</li>\n<li><strong>dielec</strong> (float):\ndielectric constant</li>\n<li><strong>rcta</strong> (float):\ncustomizable grid left cutoff</li>\n<li><strong>rctb</strong> (float):\ncustomizable grid right cutoff</li>\n<li><strong>hmax</strong> (float):\ncustomizable grid well-depth</li>\n<li><strong>flag_grid</strong> (bool):\nwhether or not grid need to be generated</li>\n<li><strong>flag_rdie</strong> (bool):\ntrue for rdie, false for cdie</li>\n<li><strong>flag_form</strong> (bool):\nwhether or not grid form is formatted</li>\n<li><strong>flag_delete_grid</strong> (bool):\nwhether or not delete grid after calculation</li>\n<li><strong>probeFile</strong> (str):\ngpu probe file names</li>\n<li><strong>softGridFile</strong> (str):\nsoft grid file name</li>\n<li><strong>hardGridFile</strong> (str):\nhard grid file name</li>\n<li><strong>nativeGridFile</strong> (str):\nnative grid file name</li>\n<li><strong>receptorPDB</strong> (str):\nprotein pdb file name</li>\n<li><strong>receptorPSF</strong> (str):\nprotein psf file name</li>\n<li><strong>ligPDB</strong> (str):\nligand pdb file name</li>\n<li><strong>ligSeg</strong> (str):\nligand segment ID</li>\n<li><strong>confDir</strong> (str):\nconformer folder name</li>\n<li><strong>placementDir</strong> (str):\nplacement folder name</li>\n<li><strong>exhaustiveness</strong> (str):\nexhaustiveness for fast placement, high, medium, low</li>\n<li><strong>numPlace</strong> (int):\nnumber of placement for each conformer</li>\n<li><strong>numCopy</strong> (int):\nnumber of Copy for OpenMM docking simulated annealing</li>\n<li><strong>flag_delete_conformer</strong> (bool):\nwhether or not delete conformer after docking</li>\n<li><strong>flag_delete_placement</strong> (bool):\nwhether or not delete placement after docking</li>\n<li><strong>flag_save_all</strong> (bool):\nwhether or not save all docked pose</li>\n<li><strong>flag_save_cluster</strong> (bool):\nwhether or not save clustered results</li>\n<li><strong>flag_save_top</strong> (bool):\nwhether or not save top 10 lowest energy pose</li>\n<li><strong>flag_suppress_print</strong> (bool):\nwhether or not suppress printing</li>\n<li><strong>flag_fast_grid</strong> (bool):\nwhether or not just use grid minimize result i.e., skip all atom mini</li>\n<li><strong>flag_center_ligand</strong> (bool):\nwhether or not ligand need to be centered</li>\n<li><strong>flag_use_hbond</strong> (bool):\nwhether or not use hydrogen/covalent bond in RCDOCKER</li>\n<li><strong>flag_fast_placement</strong> (bool):\nwhether or not use fast placement</li>\n<li><strong>threshold</strong> (float):\ncutoff threshold for original RCDOCKER placement\nonly meaningful when flag_fast_placement = True</li>\n<li><strong>sort_energy</strong> (str):\nsorting method</li>\n<li><strong>saveDir</strong> (str):\nfolder name for docked result</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>clusterResult</strong> (pd.DataFrame):\nclustering result</li>\n<li><strong>dockResult</strong> (pd.DataFrame):\ndocking result</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xcen</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ycen</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">zcen</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">maxlen</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">dielec</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">rcta</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">rctb</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">hmax</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">flag_grid</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">flag_rdie</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flag_form</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">flag_delete_grid</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">probeFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;&quot;../Toppar/fftdock_c36prot_cgenff_probes.txt&quot;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">softGridFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid-emax-0.6-mine--0.4-maxe-0.4.bin&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hardGridFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid-emax-3-mine--30-maxe-30.bin&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">nativeGridFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid-emax-100-mine--100-maxe-100.bin&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">receptorPDB</span><span class=\"o\">=</span><span class=\"s1\">&#39;./protein.pdb&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">receptorPSF</span><span class=\"o\">=</span><span class=\"s1\">&#39;./protein.psf&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ligPDB</span><span class=\"o\">=</span><span class=\"s1\">&#39;./ligand.pdb&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ligSeg</span><span class=\"o\">=</span><span class=\"s1\">&#39;LIGA&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">confDir</span><span class=\"o\">=</span><span class=\"s1\">&#39;./conformer/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">placementDir</span><span class=\"o\">=</span><span class=\"s1\">&#39;./placement/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">exhaustiveness</span><span class=\"o\">=</span><span class=\"s1\">&#39;high&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">numPlace</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">numCopy</span><span class=\"o\">=</span><span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">flag_delete_conformer</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flag_delete_placement</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flag_save_all</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flag_save_cluster</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flag_save_top</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flag_suppress_print</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flag_center_ligand</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flag_fast_grid</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">flag_use_hbond</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">flag_fast_placement</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">2500</span>,</span><span class=\"param\">\t<span class=\"n\">sort_energy</span><span class=\"o\">=</span><span class=\"s1\">&#39;total_energy&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">saveDir</span><span class=\"o\">=</span><span class=\"s1\">&#39;./dockresult/&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cdocker.Flexible_CDOCKER", "modulename": "pycharmm.cdocker", "qualname": "Flexible_CDOCKER", "kind": "function", "doc": "<p>Flexible CDOCKER standard docking method </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>xcen</strong> (float):\ncenter of the docking pocket</li>\n<li><strong>ycen</strong> (float):\ncenter of the docking pocket</li>\n<li><strong>zcen</strong> (float):\ncenter of the docking pocket</li>\n<li><strong>maxlen</strong> (float):\nsize of the grid box</li>\n<li><strong>num</strong> (float):\nnumber of conformer</li>\n<li><strong>copy</strong> (float):\nnumber of copies for each conformer</li>\n<li><strong>threshold_init</strong> (float):\nenergy threshold for initial placement</li>\n<li><strong>threshold_mutate</strong> (float):\nenergy threshold for mutation</li>\n<li><strong>flag_grid</strong> (bool):\nwhether or not grid need to be generated</li>\n<li><strong>flag_form</strong> (bool):\nwhether or not grid form is formatted</li>\n<li><strong>flag_delete_grid</strong> (bool):\nwhether or not delete grid after calculation</li>\n<li><strong>probeFile</strong> (str):\ngpu probe file names</li>\n<li><strong>softGridFile</strong> (str):\nsoft grid file name</li>\n<li><strong>hardGridFile</strong> (str):\nhard grid file name</li>\n<li><strong>nativeGridFile</strong> (str):\nnative grid file name</li>\n<li><strong>receptorPDB</strong> (str):\nprotein pdb file name</li>\n<li><strong>receptorPSF</strong> (str):\nprotein psf file name</li>\n<li><strong>receptorCard</strong> (str):\nreceptor coordinate card name</li>\n<li><strong>saveLig</strong> (str):\nligand docked result saved folder name</li>\n<li><strong>saveProt</strong> (str):\nprotein docked result saved folder name</li>\n<li><strong>crossoverLig</strong> (str):\ncrossover ligand folder before mutation</li>\n<li><strong>crossoverProt</strong> (str):\ncrossover protein folder before mutation</li>\n<li><strong>saveLigFinal</strong> (str):\nligand final docked result saved folder name</li>\n<li><strong>saveProtFinal</strong> (str):\nprotein final docked result saved folder name</li>\n<li><strong>ligPDB</strong> (str):\nligand pdb file name</li>\n<li><strong>ligSeg</strong> (str):\nligand segment ID</li>\n<li><strong>flexchain</strong> (pd.DataFrame):\ndataframe of the flexchain selection</li>\n<li><strong>placementDir</strong> (str):\nplacement folder name</li>\n<li><strong>flag_save_all</strong> (bool):\nwhether or not save all docked pose</li>\n<li><strong>flag_save_cluster</strong> (bool):\nwhether or not save clustered results</li>\n<li><strong>flag_save_placement</strong> (bool):\nwhether or not save inital placement after docking</li>\n<li><strong>flag_save_crossover</strong> (bool):\nwhether or not save crossover after docking</li>\n<li><strong>flag_suppress_print</strong> (bool):\nwhether or not suppress printing</li>\n<li><strong>flag_center_ligand</strong> (bool):\nwhether or not ligand need to be centered</li>\n<li><strong>flag_fast_grid</strong> (bool):\nwhether or not just use grid minimize result i.e., skip all atom mini</li>\n<li><strong>flag_fast_placement</strong> (bool):\nwhether or not use fast initial placement</li>\n<li><strong>exhaustiveness</strong> (str):\nexhaustiveness for fast placement, high, medium, low</li>\n<li><strong>top_N_result</strong> (int):\nnumber of top N clusters, final generation uses top N + 5 clusters</li>\n<li><strong>sort_energy</strong> (str):\nsorting method</li>\n<li><strong>saveDir</strong> (str):\nfolder name for docked result</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>clusterResult</strong> (pd.DataFrame):\nclustering result</li>\n<li><strong>dockResult</strong> (pd.DataFrame):\ndocking result</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xcen</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ycen</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">zcen</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">maxlen</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">copy</span><span class=\"o\">=</span><span class=\"mi\">25</span>,</span><span class=\"param\">\t<span class=\"n\">generation</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">threshold_init</span><span class=\"o\">=</span><span class=\"mi\">2500</span>,</span><span class=\"param\">\t<span class=\"n\">threshold_mutate</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">flag_grid</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">flag_form</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">flag_delete_grid</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">probeFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;&quot;../Toppar/fftdock_c36prot_cgenff_probes.txt&quot;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">softGridFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid-emax-0.6-mine--0.4-maxe-0.4.bin&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hardGridFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid-emax-3-mine--30-maxe-30.bin&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">nativeGridFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid-emax-100-mine--100-maxe-100.bin&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">receptorPDB</span><span class=\"o\">=</span><span class=\"s1\">&#39;./protein.pdb&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">receptorPSF</span><span class=\"o\">=</span><span class=\"s1\">&#39;./protein.psf&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">receptorCard</span><span class=\"o\">=</span><span class=\"s1\">&#39;&quot;./flexchain.crd&quot;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">saveLig</span><span class=\"o\">=</span><span class=\"s1\">&#39;./ligand/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">saveProt</span><span class=\"o\">=</span><span class=\"s1\">&#39;./protein/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">crossoverLig</span><span class=\"o\">=</span><span class=\"s1\">&#39;./crossover_ligand/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">crossoverProt</span><span class=\"o\">=</span><span class=\"s1\">&#39;./crossover_protein/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">saveLigFinal</span><span class=\"o\">=</span><span class=\"s1\">&#39;./ligand_final/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">saveProtFinal</span><span class=\"o\">=</span><span class=\"s1\">&#39;./protein_final/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ligPDB</span><span class=\"o\">=</span><span class=\"s1\">&#39;./ligand.pdb&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ligSeg</span><span class=\"o\">=</span><span class=\"s1\">&#39;LIGA&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">flexchain</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">placementDir</span><span class=\"o\">=</span><span class=\"s1\">&#39;./placement/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">flag_save_all</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">flag_save_cluster</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flag_save_placement</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">flag_save_crossover</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">flag_suppress_print</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flag_center_ligand</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flag_fast_grid</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">flag_fast_placement</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">exhaustiveness</span><span class=\"o\">=</span><span class=\"s1\">&#39;high&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">top_N_result</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">sort_energy</span><span class=\"o\">=</span><span class=\"s1\">&#39;total_energy&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">saveDir</span><span class=\"o\">=</span><span class=\"s1\">&#39;./dockresult/&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.charmm_file", "modulename": "pycharmm.charmm_file", "kind": "module", "doc": "<p>A class to manipulate files at the fortran level</p>\n\n<h1 id=\"classes\">Classes</h1>\n\n<ul>\n<li><code>CharmmFile</code> -- open and close files with access to unit number and file name</li>\n</ul>\n"}, {"fullname": "pycharmm.charmm_file.CharmmFile", "modulename": "pycharmm.charmm_file", "qualname": "CharmmFile", "kind": "class", "doc": "<p>A class to manipulate files at the fortran level</p>\n"}, {"fullname": "pycharmm.charmm_file.CharmmFile.__init__", "modulename": "pycharmm.charmm_file", "qualname": "CharmmFile.__init__", "kind": "function", "doc": "<p>class constructor</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>string file_name</strong>:  name of the file</li>\n<li><strong>int file_unit</strong>:  associate this unit number with the file, get next unused unit number if -1</li>\n<li><strong>bool read_only</strong>:  open the file in read only mode, no writing allowed</li>\n<li><strong>bool append</strong>:  If the file is written to, should the new content be appended to the end?</li>\n<li><strong>bool formatted</strong>:  Is this file formatted in the fortran sense?</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_name</span>,</span><span class=\"param\">\t<span class=\"n\">file_unit</span><span class=\"o\">=-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">read_only</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">append</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">formatted</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "pycharmm.charmm_file.CharmmFile.open", "modulename": "pycharmm.charmm_file", "qualname": "CharmmFile.open", "kind": "function", "doc": "<p>Open the file</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if file is open</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.charmm_file.CharmmFile.close", "modulename": "pycharmm.charmm_file", "qualname": "CharmmFile.close", "kind": "function", "doc": "<p>Close the file</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if file is closed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cons_fix", "modulename": "pycharmm.cons_fix", "kind": "module", "doc": "<p>Functions to configure fix constraints</p>\n\n<p>Corresponds to CHARMM command <code>CONS FIX</code></p>\n\n<p>See CHARMM documentation <a href=\"https://academiccharmm.org/documentation/version/c47b1/cons#FixedAtom\">CONS FIX</a>\nfor more information</p>\n\n<h1 id=\"functions\">Functions</h1>\n\n<ul>\n<li><code>turn_off</code> -- turn off fix constraints</li>\n<li><code>setup</code> -- turn on fix constraints</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>Fix all atoms in a segment named PROT</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.cons_fix</span> <span class=\"k\">as</span> <span class=\"nn\">cons_fix</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cons_fix</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">pycharmm</span><span class=\"o\">.</span><span class=\"n\">SelectAtoms</span><span class=\"p\">(</span><span class=\"n\">seg_id</span><span class=\"o\">=</span><span class=\"s1\">&#39;PROT&#39;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.cons_fix.turn_off", "modulename": "pycharmm.cons_fix", "qualname": "turn_off", "kind": "function", "doc": "<p>Turn off and clear settings for fix constraints</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>comparison</strong> (bool):\nif true, turn off fix contraints on the comparison set</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True &lt;==&gt; success</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">comparison</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cons_fix.setup", "modulename": "pycharmm.cons_fix", "qualname": "setup", "kind": "function", "doc": "<p>Configure and turn on fix constraints for the selected atoms</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>selection</strong> (pycharmm.SelectAtoms):\nselection[i] == 1 &lt;=&gt; apply constraints to atom i</li>\n<li><strong>comparison</strong> (bool):\nif true, do constraints on comparison set instead of main set</li>\n<li><strong>purge</strong> (bool):\nif true, use the purge option which modified the PSF irrevocably</li>\n<li><strong>bond</strong> (bool):\nif true, use the bond option</li>\n<li><strong>angle</strong> (bool):\nif true, use the angle option</li>\n<li><strong>phi</strong> (bool):\nif true, use the phi option</li>\n<li><strong>imp</strong> (bool):\nif true, use the imp option</li>\n<li><strong>cmap</strong> (bool):\nif true, use the cmap option</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True &lt;==&gt; success</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">selection</span>,</span><span class=\"param\">\t<span class=\"n\">comparison</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">purge</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">bond</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">imp</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cons_harm", "modulename": "pycharmm.cons_harm", "kind": "module", "doc": "<p>Functions to set up and configure harmonic restraints.</p>\n\n<p>Corresponds to CHARMM command <code>CONS HARMonic</code> <br />\nSee <a href=\"https://academiccharmm.org/documentation/version/c47b1/cons#HarmonicAtom\">CONS HARMonic documentation</a></p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.cons_harm</span> <span class=\"k\">as</span> <span class=\"nn\">cons_harm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.selection</span> <span class=\"k\">as</span> <span class=\"nn\">selection</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.psf</span> <span class=\"k\">as</span> <span class=\"nn\">psf</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cons_harm</span><span class=\"o\">.</span><span class=\"n\">setup_best_fit</span><span class=\"p\">(</span><span class=\"n\">force_const</span><span class=\"o\">=</span><span class=\"mf\">10.0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">natom</span> <span class=\"o\">=</span> <span class=\"n\">psf</span><span class=\"o\">.</span><span class=\"n\">get_natom</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">isel</span> <span class=\"o\">=</span> <span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">none_selection</span><span class=\"p\">(</span><span class=\"n\">natom</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">isel</span> <span class=\"o\">=</span> <span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">by_elt</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">isel</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">isel</span> <span class=\"o\">=</span> <span class=\"n\">pycharmm</span><span class=\"o\">.</span><span class=\"n\">SelectAtoms</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_selection</span><span class=\"p\">(</span><span class=\"n\">isel</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jsel</span> <span class=\"o\">=</span> <span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">none_selection</span><span class=\"p\">(</span><span class=\"n\">natom</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jsel</span> <span class=\"o\">=</span> <span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">by_elt</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">jsel</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jsel</span> <span class=\"o\">=</span> <span class=\"n\">pycharmm</span><span class=\"o\">.</span><span class=\"n\">SelectAtoms</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_selection</span><span class=\"p\">(</span><span class=\"n\">jsel</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cons_harm</span><span class=\"o\">.</span><span class=\"n\">setup_relative</span><span class=\"p\">(</span><span class=\"n\">isel</span><span class=\"p\">,</span> <span class=\"n\">jsel</span><span class=\"p\">,</span> <span class=\"n\">force_const</span><span class=\"o\">=</span><span class=\"mf\">10.0</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.cons_harm.turn_off", "modulename": "pycharmm.cons_harm", "qualname": "turn_off", "kind": "function", "doc": "<p>Turn off and clear settings for harmonic constraints</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cons_harm.setup_pca", "modulename": "pycharmm.cons_harm", "qualname": "setup_pca", "kind": "function", "doc": "<p>Configure and turn on absolute harmonic constraints for the selected atoms</p>\n\n<p><em>Valid</em> key word arguments for settings include\n<code>expo</code>, <code>x_scale</code>, <code>y_scale</code>, <code>z_scale</code>, <code>q_mass</code>, <code>q_weight</code>, and <code>force_const</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>selection</strong> (pycharmm.SelectAtoms, default = None):\napply restraints to selected atoms; None -> all atoms</li>\n<li><strong>comparison</strong> (bool, default = False):\nif true, apply restraints on comparison set instead of main set</li>\n<li><strong>**kwargs</strong> (optional):\nkey word arguments for absolute harmonic constraints</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">comparison</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cons_harm.setup_absolute", "modulename": "pycharmm.cons_harm", "qualname": "setup_absolute", "kind": "function", "doc": "<p>Configure and turn on absolute harmonic restraints for the selected atoms</p>\n\n<p><em>Valid</em> key word arguments for settings include\n<code>expo</code>, <code>x_scale</code>, <code>y_scale</code>, <code>z_scale</code>, <code>q_mass</code>, <code>q_weight</code>, and <code>force_const</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>selection</strong> (pycharmm.SelectAtoms):\napply restraints to selected atoms; None -> all atoms</li>\n<li><strong>comparison</strong> (bool, default = False):\nif true, do restraints on comparison set instead of main set</li>\n<li><strong>**kwargs</strong> (optional):\nkey word arguments for absolute harmonic constraints</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<p>bool\n    True if successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">comparison</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cons_harm.setup_best_fit", "modulename": "pycharmm.cons_harm", "qualname": "setup_best_fit", "kind": "function", "doc": "<p>Configure and turn on best fit harmonic restraints for the selected atoms</p>\n\n<p><em>Valid</em> key word arguments for settings include\n<code>q_no_rot</code>, <code>q_no_trans</code>, <code>q_mass</code>, <code>q_weight</code>, <code>force_const</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>selection</strong> (pycharmm.SelectAtoms):\napply restraints to selected atoms</li>\n<li><strong>comparison</strong> (bool):\nif true, do restraints on comparison set instead of main set</li>\n<li><strong>**kwargs</strong> (optional):\nkey word arguments for best fit harmonic constraints</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">comparison</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cons_harm.setup_relative", "modulename": "pycharmm.cons_harm", "qualname": "setup_relative", "kind": "function", "doc": "<p>Configure and turn on relative harmonic restraintfor the selected atoms</p>\n\n<p><em>Valid</em> key word arguments for settings include\n<code>q_no_rot</code>, <code>q_no_trans</code>, <code>q_mass</code>, <code>q_weight</code>, <code>force_const</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iselection</strong> (pycharmm.SelectAtoms):\napply restraints to selected atoms</li>\n<li><strong>jselection</strong> (pycharmm.SelectAtoms):\napply restraints to selected atoms</li>\n<li><strong>comparison</strong> (bool):\nif true, apply restraints on comparison set instead of main set</li>\n<li><strong>**kwargs</strong> (optional):\nkey word arguments for relative harmonic constraints</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iselection</span>, </span><span class=\"param\"><span class=\"n\">jselection</span>, </span><span class=\"param\"><span class=\"n\">comparison</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cons_methods", "modulename": "pycharmm.cons_methods", "kind": "module", "doc": "<p>Functions to configure various constraints/restraints covering:</p>\n\n<ul>\n<li><p>cons dihe</p></li>\n<li><p>cons cldh</p></li>\n<li><p>cons ic</p></li>\n<li><p>cons droplet</p></li>\n<li><p>cons hmcm</p></li>\n</ul>\n\n<p>Corresponds to CHARMM command <code>CONS</code></p>\n\n<p>See CHARMM documentation <a href=\"https://academiccharmm.org/documentation/version/c47b1/cons\">CONS</a>\nfor more information</p>\n\n<h1 id=\"functions\">Functions</h1>\n\n<ul>\n<li><code>dihe</code> -- set up dihedral restraints </li>\n<li><code>ic</code> -- set up internal coordinates (IC) restraints </li>\n<li><code>droplet</code> -- set up the quartic droplet potential</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>Apply a dihedral potential on four selected atoms</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.cons_methods</span> <span class=\"k\">as</span> <span class=\"nn\">cons_methods</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cons_methods</span><span class=\"o\">.</span><span class=\"n\">dihe</span><span class=\"p\">(</span><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"s1\">&#39;bynum 7 9 15 17&#39;</span><span class=\"p\">,</span><span class=\"n\">minimum</span><span class=\"o\">=-</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"n\">force</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.cons_methods.dihe", "modulename": "pycharmm.cons_methods", "qualname": "dihe", "kind": "function", "doc": "<p>Set-up/turn-off dihedral angle restraints</p>\n\n<p>See <a href=\"https://academiccharmm.org/documentation/version/c47b1/cons#Dihedral\">CONS DIHE</a>\nfor more information</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>selection</strong> (string):\n['bynum int int int int'] ['4x(segid resid iupac)'] ['4x(resnumber iupac)']</li>\n<li><strong>force</strong> (real):\nforce constant</li>\n<li><p><strong>**kwargs</strong> (dict):\npossible keyword arguments are:</p>\n\n<p>minimum : real</p>\n\n<p>period : int</p>\n\n<p>width : real </p>\n\n<p>comp : bool  </p>\n\n<p>main : bool</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">cldh</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">force</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cons_methods.ic", "modulename": "pycharmm.cons_methods", "qualname": "ic", "kind": "function", "doc": "<p>Impose internal coordinate restraints</p>\n\n<p>See <a href=\"https://academiccharmm.org/documentation/version/c47b1/cons#InternalCoord\">CONS IC</a>\nfor more information</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>**kwargs</strong> (dict):\npossible keyword arguments are:</p>\n\n<p>bond: real  </p>\n\n<p>angle: real</p>\n\n<p>dihedral : real</p>\n\n<p>improper : real</p>\n\n<p>exponent : int </p>\n\n<p>upper : bool</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.cons_methods.droplet", "modulename": "pycharmm.cons_methods", "qualname": "droplet", "kind": "function", "doc": "<p>Impose quartic droplet restraints</p>\n\n<p>See <a href=\"https://academiccharmm.org/documentation/version/c47b1/cons#QuarticDroplet\">CONS DROPlet</a>\nfor more information</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>**kwargs</strong> (dict):\npossible keyword arguments are:</p>\n\n<p>force : real</p>\n\n<p>exponent : int</p>\n\n<p>nomass : bool</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor", "modulename": "pycharmm.coor", "kind": "module", "doc": "<p>Functions for manipulating coordinates of atoms.  </p>\n\n<p>Corresponds to CHARMM module <code>corman</code> for Coordinate manipulation and analyses. <br />\nSee <a href=\"https://academiccharmm.org/documentation/version/c47b1/corman\">corman documentation</a></p>\n"}, {"fullname": "pycharmm.coor.get_natom", "modulename": "pycharmm.coor", "qualname": "get_natom", "kind": "function", "doc": "<p>Returns the number of atoms currently in the simulation  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>natom</strong> (int):\nnumber of atoms currently in the simulation</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.set_positions", "modulename": "pycharmm.coor", "qualname": "set_positions", "kind": "function", "doc": "<p>Sets the positions of the atoms in the simulation  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pos</strong> (pandas.core.frame.DataFrame):\na dataframe with columns named x, y and z</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>natom</strong> (int):\nnumber of atoms in the simulation</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.get_positions", "modulename": "pycharmm.coor", "qualname": "get_positions", "kind": "function", "doc": "<p>Gets the positions of the atoms in the simulation  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pos</strong> (pandas.core.frame.DataFrame):\na dataframe with columns named <em>x</em>, <em>y</em> and <em>z</em></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.set_weights", "modulename": "pycharmm.coor", "qualname": "set_weights", "kind": "function", "doc": "<p>Sets the weights of the atoms in the simulation  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>weights</strong> (list[float]):\nlist of one weight for each atom 0:natom</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>natom</strong> (int):\nnumber of atoms in the simulation</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">weights</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.get_weights", "modulename": "pycharmm.coor", "qualname": "get_weights", "kind": "function", "doc": "<p>Gets the weights of the atoms in the simulation  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>weights</strong> (list[float]):\na list of float atom weights 0:natom</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.copy_forces", "modulename": "pycharmm.coor", "qualname": "copy_forces", "kind": "function", "doc": "<p>Copy the forces to the comparison set  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mass</strong> (bool, default = False):\nWhether to weight the forces by mass</li>\n<li><strong>selection</strong> (pycharmm.SelectAtoms):\nonly copy forces of selected atoms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: true if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mass</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.set_forces", "modulename": "pycharmm.coor", "qualname": "set_forces", "kind": "function", "doc": "<p>Sets the forces of the atoms  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>forces</strong> (pandas.core.frame.DataFrame):\na dataframe with columns named dx, dy and dz</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>natom</strong> (int):\nnumber of atoms in the simulation</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">forces</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.get_forces", "modulename": "pycharmm.coor", "qualname": "get_forces", "kind": "function", "doc": "<p>Gets the forces of the atoms  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>forces</strong> (pandas.core.frame.DataFrame):\na dataframe with columns named <em>dx</em>, <em>dy</em> and <em>dz</em></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.set_comparison", "modulename": "pycharmm.coor", "qualname": "set_comparison", "kind": "function", "doc": "<p>Set the comparison set in CHARMM  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pos</strong> (pandas.core.frame.DataFrame):\na dataframe with columns named <em>x</em>, <em>y</em>, <em>z</em>, and <em>w</em></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>natom</strong> (int):\nnumber of atoms in the simulation</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.get_comparison", "modulename": "pycharmm.coor", "qualname": "get_comparison", "kind": "function", "doc": "<p>Gets the comparison of the atoms  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: dataframe with columns named <em>x</em>, <em>y</em>, <em>z</em>, and <em>w</em></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.set_comp2", "modulename": "pycharmm.coor", "qualname": "set_comp2", "kind": "function", "doc": "<p>Set the comp2 set in CHARMM  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pos</strong> (pandas.core.frame.DataFrame):\na dataframe with columns named <em>x</em>, <em>y</em>, <em>z</em>, and <em>w</em></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>natom</strong> (int):\nnumber of atoms in the simulation</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.get_comp2", "modulename": "pycharmm.coor", "qualname": "get_comp2", "kind": "function", "doc": "<p>Gets the comp2 of the atoms  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: dataframe with columns named <em>x</em>, <em>y</em>, <em>z</em>, and <em>w</em></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.set_main", "modulename": "pycharmm.coor", "qualname": "set_main", "kind": "function", "doc": "<p>Set the main set in CHARMM  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pos</strong> (pandas.core.frame.DataFrame):\na dataframe with columns named <em>x</em>, <em>y</em>, <em>z</em>, and <em>w</em></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>natom</strong> (int):\nnumber of atoms in the simulation</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.get_main", "modulename": "pycharmm.coor", "qualname": "get_main", "kind": "function", "doc": "<p>Gets the MAIN of the atoms  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: dataframe with columns named <em>x</em>, <em>y</em>, <em>z</em>, and <em>w</em></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.orient", "modulename": "pycharmm.coor", "qualname": "orient", "kind": "function", "doc": "<p>Modifies coordinates of all atoms according to the passed flags  </p>\n\n<p>The select set of atoms is first centered about the origin, <br />\nand then rotated to either align with the axis, <br />\nor the other coordinate set.  </p>\n\n<p>The <em>RMS</em> keyword will use the other coordinate set as a rotation reference.  </p>\n\n<p>The <em>MASS</em> keyword cause a mass weighting to be done. This will <br />\nalign the specified atoms along their moments of inertia. When the RMS <br />\nkeyword is not used, then the structure is rotated so that its principle <br />\ngeometric axis coincides with the X-axis and the next largest coincides <br />\nwith the Y-axis. This command is primarily used for preparing a <br />\nstructure for graphics and viewing. It can also be used for finding <br />\nRMS differences, and in conjunction with the vibrational analysis.  </p>\n\n<p>The <em>NORO</em>tation keyword will suppress rotations. In this case, <br />\nonly one coordinate set will be modified.  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong> (dictionary):\nkey words for the coor orient CHARMM command</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.show_comp", "modulename": "pycharmm.coor", "qualname": "show_comp", "kind": "function", "doc": "<p>Print the comparison set of the atoms  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: true if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.show", "modulename": "pycharmm.coor", "qualname": "show", "kind": "function", "doc": "<p>Print the main coordinate set of the atoms  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: true if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.stat", "modulename": "pycharmm.coor", "qualname": "stat", "kind": "function", "doc": "<p>Computes <em>max</em>, <em>min</em>, <em>ave</em> for <code>x</code>, <code>y</code>, <code>z</code>, <code>w</code> over selection of main or comp sets  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>selection</strong> (pycharmm.SelectAtoms):\na selection of atom indexes to use for stats</li>\n<li><strong>comp</strong> (bool):\nif true, stats computed for comparison set selection</li>\n<li><strong>mass</strong> (bool):\nif true, will place the average values at the center of mass</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: A python dictionary with keys <br />\nxmin, xmax, xave, <br />\nymin, ymax, yave, <br />\nzmin, zmax, zave, <br />\nwmin, wmax, wave, <br />\nn_selected, n_misses</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">comp</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">mass</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.Coordinates", "modulename": "pycharmm.coor", "qualname": "Coordinates", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycharmm.coor.Coordinates.__init__", "modulename": "pycharmm.coor", "qualname": "Coordinates.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">coord_set</span></span>)</span>"}, {"fullname": "pycharmm.coor.Coordinates.pull", "modulename": "pycharmm.coor", "qualname": "Coordinates.pull", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.coor.Coordinates.push", "modulename": "pycharmm.coor", "qualname": "Coordinates.push", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.crystal", "modulename": "pycharmm.crystal", "kind": "module", "doc": "<p>Build a crystal with any space group symmetry,\n   optimise its lattice parameters and\n   molecular coordinates and\n   carry out a vibrational analysis using the options.</p>\n\n<p>Corresponds to CHARMM command <code>CRYStal</code></p>\n\n<p>See CHARMM documentation <a href=\"https://academiccharmm.org/documentation/version/c47b1/crystl\">crystl</a>\nfor more information</p>\n\n<h1 id=\"functions\">Functions</h1>\n\n<ul>\n<li><code>define_cubic</code> -- defines a cubic lattice for a new crystal</li>\n<li><code>define_tetra</code> -- defines a tetragonal lattice for a new crystal</li>\n<li><code>define_ortho</code> -- defines a orthorhombic lattice for a new crystal</li>\n<li><code>define_mono</code> -- defines a monoclinic lattice for a new crystal</li>\n<li><code>define_tri</code> -- defines a triclinic lattice for a new crystal</li>\n<li><code>define_hexa</code> -- defines a hexagonal lattice for a new crystal</li>\n<li><code>define_rhombo</code> -- defines a rhombohedral lattice for a new crystal</li>\n<li><code>define_octa</code> -- defines a octahedral lattice for a new crystal</li>\n<li><code>define_rhdo</code> -- defines a rhombic dodecahedron lattice for a new crystal</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>Build a cubic simulation box of 0.7 nm </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">crystal</span><span class=\"o\">.</span><span class=\"n\">define_cubic</span><span class=\"p\">(</span><span class=\"mi\">70</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">crystal</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.crystal.define_cubic", "modulename": "pycharmm.crystal", "qualname": "define_cubic", "kind": "function", "doc": "<p>Defines a cubic lattice and constants for a new crystal</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>length</strong> (float):\nlength of all sides</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True for success, otherwise False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.crystal.define_tetra", "modulename": "pycharmm.crystal", "qualname": "define_tetra", "kind": "function", "doc": "<p>Defines a tetragonal lattice and constants for a new crystal</p>\n\n<p>The alpha, beta and gamma angles are all 90.0 degrees.\nThe length of sides a and b are equal.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>length_a</strong> (float):\nlength of sides a and b</li>\n<li><strong>length_c</strong> (float):\nlength of side c</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True for success, otherwise False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length_a</span>, </span><span class=\"param\"><span class=\"n\">length_c</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.crystal.define_ortho", "modulename": "pycharmm.crystal", "qualname": "define_ortho", "kind": "function", "doc": "<p>Defines a orthorhombic lattice and constants for a new crystal</p>\n\n<p>The alpha, beta and gamma angles are all 90.0 degrees.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>length_a</strong> (float):\nlength of side a</li>\n<li><strong>length_b</strong> ():\nfloat length of side b</li>\n<li><strong>length_c</strong> (float):\nlength of side c</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True for success, otherwise False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length_a</span>, </span><span class=\"param\"><span class=\"n\">length_b</span>, </span><span class=\"param\"><span class=\"n\">length_c</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.crystal.define_mono", "modulename": "pycharmm.crystal", "qualname": "define_mono", "kind": "function", "doc": "<p>Defines a monoclinic lattice and constants for a new crystal</p>\n\n<p>The alpha and gamma angles are both 90.0 degrees.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>length_a</strong> (float):\nlength of side a</li>\n<li><strong>length_b</strong> (float):\nlength of side b</li>\n<li><strong>length_c</strong> (float):\nlength of side c</li>\n<li><strong>angle_beta</strong> (float):\nmeasure of angle beta in degrees</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True for success, otherwise False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length_a</span>, </span><span class=\"param\"><span class=\"n\">length_b</span>, </span><span class=\"param\"><span class=\"n\">length_c</span>, </span><span class=\"param\"><span class=\"n\">angle_beta</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.crystal.define_tri", "modulename": "pycharmm.crystal", "qualname": "define_tri", "kind": "function", "doc": "<p>Defines a triclinic lattice and constants for a new crystal</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>length_a</strong> (float):\nlength of side a</li>\n<li><strong>length_b</strong> (float):\nlength of side b</li>\n<li><strong>length_c</strong> (float):\nlength of side c</li>\n<li><strong>angle_alpha</strong> (float):\nmeasure of angle alpha in degrees</li>\n<li><strong>angle_beta</strong> (float):\nmeasure of beta alpha in degrees</li>\n<li><strong>angle_gamma</strong> (float):\nmeasure of gamma alpha in degrees</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True for success, otherwise False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length_a</span>, </span><span class=\"param\"><span class=\"n\">length_b</span>, </span><span class=\"param\"><span class=\"n\">length_c</span>, </span><span class=\"param\"><span class=\"n\">angle_alpha</span>, </span><span class=\"param\"><span class=\"n\">angle_beta</span>, </span><span class=\"param\"><span class=\"n\">angle_gamma</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.crystal.define_hexa", "modulename": "pycharmm.crystal", "qualname": "define_hexa", "kind": "function", "doc": "<p>Defines a hexagonal lattice and constants for a new crystal</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>length_a</strong> (float):\nlengths of sides a and b</li>\n<li><strong>length_c</strong> (float):\nlength of side c</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True for success, otherwise False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length_a</span>, </span><span class=\"param\"><span class=\"n\">length_c</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.crystal.define_rhombo", "modulename": "pycharmm.crystal", "qualname": "define_rhombo", "kind": "function", "doc": "<p>Defines a rhombohedral lattice and constants for a new crystal</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>length</strong> (float):\nlength of each side</li>\n<li><strong>angle</strong> (float):\nmeasure of each angle in degrees, must be between 0 and 120</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True for success, otherwise False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length</span>, </span><span class=\"param\"><span class=\"n\">angle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.crystal.define_octa", "modulename": "pycharmm.crystal", "qualname": "define_octa", "kind": "function", "doc": "<p>Defines a octahedral lattice and constants for a new crystal</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>length</strong> (float):\nthe length of each side</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True for success, otherwise False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.crystal.define_rhdo", "modulename": "pycharmm.crystal", "qualname": "define_rhdo", "kind": "function", "doc": "<p>Defines a rhombic dodecahedron lattice and constants for a new crystal</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>length</strong> (float):\nthe length of each side</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True for success, otherwise False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.crystal.build", "modulename": "pycharmm.crystal", "qualname": "build", "kind": "function", "doc": "<p>Build the crystal by repeatedly appling specified transformations</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cutoff</strong> (float):\nimages within cutoff distance are included in transformation list</li>\n<li><strong>sym_ops</strong> (list[string]):\ntransformations in (X, Y, Z) format</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True for success, otherwise False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cutoff</span>, </span><span class=\"param\"><span class=\"n\">sym_ops</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.custom", "modulename": "pycharmm.custom", "kind": "module", "doc": "<p>Set a python function to run during dynamics</p>\n"}, {"fullname": "pycharmm.custom.CustomDynam", "modulename": "pycharmm.custom", "qualname": "CustomDynam", "kind": "class", "doc": "<p>Set a python function to run during dynamics</p>\n"}, {"fullname": "pycharmm.custom.CustomDynam.__init__", "modulename": "pycharmm.custom", "qualname": "CustomDynam.__init__", "kind": "function", "doc": "<p>Constructor</p>\n\n<p>The <code>py_func</code> parameter should be a python function that takes 11 arguments: <br />\n<code>current_step</code>: the current step number of the dynamics run <br />\n<code>natoms</code>: the integer number of elements in the next six arrays <br />\n<code>vx</code>, <code>vy</code>, <code>vz</code>: double precision floating point arrays of atom velocities <br />\n<code>x_new</code>, <code>y_new</code>, <code>z_new</code>: double precision floating point arrays of atom positions <br />\n<code>x_old</code>, <code>y_old</code>, <code>z_old</code>: double precision floating point arrays of atom positions  </p>\n\n<p>Inside the py_func function, the array arguments must be updated element by element\nsince they are passed at C pointers. Slicing on the left hand side of an equal sign\nwill not work for updating elements. List comprehensions on the right hand side\nprobably will not either.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>py_func</strong> (callable):\nthe function to run during dynamics</li>\n<li><strong>set_func_now</strong> (bool, default = True):\ndo not run the function now, but store it</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">py_func</span>, </span><span class=\"param\"><span class=\"n\">set_func_now</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "pycharmm.custom.CustomDynam.set_func", "modulename": "pycharmm.custom", "qualname": "CustomDynam.set_func", "kind": "function", "doc": "<p>Set a python function to run during dynamics</p>\n\n<p>The <code>py_func</code> parameter should be a python function that takes 11 arguments: <br />\n<code>current_step</code>: the current step number of the dynamics run <br />\n<code>natoms</code>: the integer number of elements in the next six arrays <br />\n<code>vx</code>, <code>vy</code>, <code>vz</code>: double precision floating point arrays of atom velocities <br />\n<code>x_new</code>, <code>y_new</code>, <code>z_new</code>: double precision floating point arrays of atom positions <br />\n<code>x_old</code>, <code>y_old</code>, <code>z_old</code>: double precision floating point arrays of atom positions  </p>\n\n<p>Inside the py_func function, the array arguments must be updated element by element\nsince they are passed at C pointers. Slicing on the left hand side of an equal sign\nwill not work for updating elements. List comprehensions on the right hand side\nprobably will not either.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>py_func</strong> (callable):\nthe function to run during dynamics</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">py_func</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.custom.CustomDynam.unset_func", "modulename": "pycharmm.custom", "qualname": "CustomDynam.unset_func", "kind": "function", "doc": "<p>Do not run a python function during dynamics</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics", "modulename": "pycharmm.dynamics", "kind": "module", "doc": "<p>Functions to configure and run molecular dynamics</p>\n\n<p>Corresponds to CHARMM command <code>DYNAmics</code></p>\n\n<p>See CHARMM documentation <a href=\"https://academiccharmm.org/documentation/version/c47b1/dynamc\">dynamc</a>\nfor more information</p>\n\n<h1 id=\"functions\">Functions</h1>\n\n<ul>\n<li><code>use_lang</code> -- use Langevin dynamics</li>\n<li><code>use_start</code> -- use starting velocities described by iasvel</li>\n<li><code>set_nprint</code> -- change step freq to print and store energy data during runs</li>\n<li><code>get_nprint</code> -- return step freq to print and store energy data during runs</li>\n<li><code>set_nstep</code> -- change the number of steps to be taken in each dynamics run</li>\n<li><code>get_nstep</code> -- return the number of steps to be taken in each dynamics run</li>\n<li><code>set_inbfrq</code> -- change the freq of regenerating nonbonded list during runs</li>\n<li><code>set_ihbfrq</code> -- change the freq of regenerating the hydrogen bond list</li>\n<li><code>set_timest</code> -- set the time step for dynamics</li>\n<li><code>set_akmast</code> -- set the time step for dynamics in AKMA units</li>\n<li><code>set_firstt</code> -- set the initial temperature for dynamics runs</li>\n<li><code>run</code> -- run the dynamics</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>A simple NVT simulation using Langevin dynamics at 298.15 K</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.psf</span> <span class=\"k\">as</span> <span class=\"nn\">psf</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.scalar</span> <span class=\"k\">as</span> <span class=\"nn\">scalar</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">psf</span><span class=\"o\">.</span><span class=\"n\">get_natom</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scalar</span><span class=\"o\">.</span><span class=\"n\">set_fbetas</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prod</span> <span class=\"o\">=</span> <span class=\"n\">pycharmm</span><span class=\"o\">.</span><span class=\"n\">DynamicsScript</span><span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">leap</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verlet</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">cpt</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">new</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">langevin</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">omm</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">timestep</span> <span class=\"o\">=</span> <span class=\"mf\">0.002</span><span class=\"p\">,</span> <span class=\"n\">nstep</span> <span class=\"o\">=</span> <span class=\"mi\">50000</span><span class=\"p\">,</span> <span class=\"n\">nsavc</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"n\">nsavv</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">nsavl</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"n\">nprint</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">iprfrq</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">isvfrq</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">ntrfrq</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"n\">inbfrq</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ihbfrq</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ilbfrq</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">imgfrq</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">iunrea</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">iunwri</span> <span class=\"o\">=</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"n\">iuncrd</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">iunldm</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">firstt</span> <span class=\"o\">=</span> <span class=\"mf\">298.15</span><span class=\"p\">,</span> <span class=\"n\">finalt</span> <span class=\"o\">=</span> <span class=\"mf\">298.15</span><span class=\"p\">,</span> <span class=\"n\">tstruct</span> <span class=\"o\">=</span> <span class=\"mf\">298.15</span><span class=\"p\">,</span> <span class=\"n\">tbath</span> <span class=\"o\">=</span> <span class=\"mf\">298.15</span><span class=\"p\">,</span> <span class=\"n\">iasors</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">iasvel</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">iscale</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ichecw</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">echeck</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prod</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.dynamics.OPTIONS", "modulename": "pycharmm.dynamics", "qualname": "OPTIONS", "kind": "class", "doc": "<p>A ctypes struct to hold runtime dynamics settings</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>ieqfrq</strong> (int):\nThe step frequency for assigning or scaling velocities to\nFINALT temperature during the equilibration stage of the\ndynamics run.</li>\n<li><strong>ntrfrq</strong> (int):\nThe step frequency for stopping the rotation and translation\nof the molecule during dynamics. This operation is done\nautomatically after any heating.</li>\n<li><p><strong>ichecw</strong> (int):\nThe option for checking to see if the average temperature\nof the system lies within the allotted temperature window\n(between FINALT+TWINDH and FINALT+TWINDL) every\nIEQFRQ steps.</p>\n\n<p>.eq. 0 - do not check,\n        i.e., assign or scale velocities.</p>\n\n<p>.ne. 0 - check window,\n        i.e., assign or scale velocities only if average\n        temperature lies outside the window.</p></li>\n</ul>\n", "bases": "_ctypes.Structure"}, {"fullname": "pycharmm.dynamics.OPTIONS.ieqfrq", "modulename": "pycharmm.dynamics", "qualname": "OPTIONS.ieqfrq", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.dynamics.OPTIONS.ntrfrq", "modulename": "pycharmm.dynamics", "qualname": "OPTIONS.ntrfrq", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.dynamics.OPTIONS.ichecw", "modulename": "pycharmm.dynamics", "qualname": "OPTIONS.ichecw", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.dynamics.OPTIONS.tbath", "modulename": "pycharmm.dynamics", "qualname": "OPTIONS.tbath", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.dynamics.OPTIONS.iasors", "modulename": "pycharmm.dynamics", "qualname": "OPTIONS.iasors", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.dynamics.OPTIONS.iasvel", "modulename": "pycharmm.dynamics", "qualname": "OPTIONS.iasvel", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.dynamics.OPTIONS.iscale", "modulename": "pycharmm.dynamics", "qualname": "OPTIONS.iscale", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.dynamics.OPTIONS.iscvel", "modulename": "pycharmm.dynamics", "qualname": "OPTIONS.iscvel", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.dynamics.OPTIONS.isvfrq", "modulename": "pycharmm.dynamics", "qualname": "OPTIONS.isvfrq", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.dynamics.OPTIONS.iprfrq", "modulename": "pycharmm.dynamics", "qualname": "OPTIONS.iprfrq", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.dynamics.OPTIONS.ihtfrq", "modulename": "pycharmm.dynamics", "qualname": "OPTIONS.ihtfrq", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.dynamics.use_lang", "modulename": "pycharmm.dynamics", "qualname": "use_lang", "kind": "function", "doc": "<p>Use Langevin dynamics</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: True if Langevin dynamics was already selected</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.use_start", "modulename": "pycharmm.dynamics", "qualname": "use_start", "kind": "function", "doc": "<p>Use starting velocities described by iasvel</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if start was already selected</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.use_restart", "modulename": "pycharmm.dynamics", "qualname": "use_restart", "kind": "function", "doc": "<p>Dynamics is restarted by reading restart file from iunrea</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if start was already selected</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_nprint", "modulename": "pycharmm.dynamics", "qualname": "set_nprint", "kind": "function", "doc": "<p>Change step freq for printing and storing energy data for dynamics runs</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_nprint</strong> (int):\nthe new step frequency desired</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: old step freq</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_nprint</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.get_nprint", "modulename": "pycharmm.dynamics", "qualname": "get_nprint", "kind": "function", "doc": "<p>Return step freq for printing and storing energy data for dynamics runs</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: the current step frequency</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_nstep", "modulename": "pycharmm.dynamics", "qualname": "set_nstep", "kind": "function", "doc": "<p>Change the number of steps to be taken in each dynamics run</p>\n\n<p>changes the number of dynamics steps which is equal to\nthe number of energy evaluations</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_nstep</strong> (int):\nthe new number of dynamics steps desired</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: the previous setting for the number of dynamics steps</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_nstep</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.get_nstep", "modulename": "pycharmm.dynamics", "qualname": "get_nstep", "kind": "function", "doc": "<p>Return the number of steps to be taken in each dynamics run</p>\n\n<p>returns the number of dynamics steps which is equal to\nthe number of energy evaluations</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: the current number of steps to be taken</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_inbfrq", "modulename": "pycharmm.dynamics", "qualname": "set_inbfrq", "kind": "function", "doc": "<p>Change the freq of regenerating the nonbonded list for dynamics runs</p>\n\n<p>The list is regenerated if the current step number\nmodulo INBFRQ is zero and if INBFRQ is non-zero.</p>\n\n<p>Specifying zero prevents the non-bonded list from being\nregenerated at all.</p>\n\n<p>INBFRQ = -1 --> all lists are updated when necessary\n(heuristic test).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_inbfrq</strong> (int):\nthe new freq for nonbonded list regeneration</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: the old inbfrq</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_inbfrq</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_ihbfrq", "modulename": "pycharmm.dynamics", "qualname": "set_ihbfrq", "kind": "function", "doc": "<p>Change the freq of regenerating the hydrogen bond list</p>\n\n<p>analogous to set_inbfrq</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_ihbfrq</strong> (int):\nthe new freq for hydrogen bond list regeneration</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: the old inbfrq</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_ihbfrq</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_ilbfrq", "modulename": "pycharmm.dynamics", "qualname": "set_ilbfrq", "kind": "function", "doc": "<p>Change the freq of checking whether an atom is in the Langevin region</p>\n\n<p>Langevin region defined by RBUF</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_ilbfrq</strong> (int):\nthe new freq</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: the old freq</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_ilbfrq</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_finalt", "modulename": "pycharmm.dynamics", "qualname": "set_finalt", "kind": "function", "doc": "<p>Set the final equilibrium temperature</p>\n\n<p>important for all stages except initiation</p>\n\n<p>the default is 298.0 Kelvin</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_finalt</strong> (float):\nnew final temperature in Kelvin</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: old final temperature in Kelvin</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_finalt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_teminc", "modulename": "pycharmm.dynamics", "qualname": "set_teminc", "kind": "function", "doc": "<p>Set the temperature increment to be given to the system every IHTFRQ steps</p>\n\n<p>important for the heating stage</p>\n\n<p>the default is 5.0 Kelvin</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_teminc</strong> (float):\nthe new temperature increment</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: the old temperature increment</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_teminc</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_tstruc", "modulename": "pycharmm.dynamics", "qualname": "set_tstruc", "kind": "function", "doc": "<p>Set the temperature at which the starting structure has been equilibrated</p>\n\n<p>used to assign velocities so that equal\npartition of energy will yield the correct equilibrated\ntemperature</p>\n\n<p>-999.0 is a default which causes the\nprogram to assign velocities at T = 1.25 * FIRSTT</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_tstruc</strong> (float):\nthe new temperature</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong> ():\nthe old temperature</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_tstruc</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.get_nrand", "modulename": "pycharmm.dynamics", "qualname": "get_nrand", "kind": "function", "doc": "<p>Return the number of integers required to seed the random number generator</p>\n\n<p>the random number generator plays a role in assigning velocities</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: the current number of seed integers the random number generator needs</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_rngseeds", "modulename": "pycharmm.dynamics", "qualname": "set_rngseeds", "kind": "function", "doc": "<p>Set seed for the random number generator</p>\n\n<p>The seed for the random number generator used for\nassigning velocities. If not specified a value based on\nthe system clock is used; this is the recommended mode, since\nit makes each run unique.</p>\n\n<p>One integer, or as many as required by the random number\ngenerator, may be specified. See CHARMM documentation\n<a href=\"https://academiccharmm.org/documentation/version/c47b1/random\">random</a></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_seeds</strong> (list[int]):\nnew seeds for the random number generator</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: success == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_seeds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_iseed", "modulename": "pycharmm.dynamics", "qualname": "set_iseed", "kind": "function", "doc": "<p>An alias for set_rngseeds</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_seeds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_timest", "modulename": "pycharmm.dynamics", "qualname": "set_timest", "kind": "function", "doc": "<p>Set the time step in picoseconds for dynamics</p>\n\n<p>the default is 0.001 picoseconds</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_timest</strong> (float):\nthe new time step in picoseconds</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: old time step in picoseconds</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_timest</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_akmast", "modulename": "pycharmm.dynamics", "qualname": "set_akmast", "kind": "function", "doc": "<p>Set the time step for dynamics in AKMA units</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_akmast</strong> (float):\nthe new time step in AKMA units</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: old time step in AKMA units</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_akmast</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_firstt", "modulename": "pycharmm.dynamics", "qualname": "set_firstt", "kind": "function", "doc": "<p>Set the initial temperature for dynamics runs</p>\n\n<p>Set the initial temperature at which the velocities have to be\nassigned to begin the dynamics run. Important only\nfor the initial stage of a dynamics run.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_firstt</strong> (float):\nthe initial temperature desired</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: old initial temp</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_firstt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_twindh", "modulename": "pycharmm.dynamics", "qualname": "set_twindh", "kind": "function", "doc": "<p>Set the high temperature tolerance for equilibration</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_twindh</strong> (float):\nthe new high temp tol for equilibration</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: old high temp tol for equilibration</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_twindh</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_twindl", "modulename": "pycharmm.dynamics", "qualname": "set_twindl", "kind": "function", "doc": "<p>Set the low temperature tolerance for equilibration</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_twindl</strong> (float):\nthe new low temp tol for equilibration</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: old low temp tol for equilibration</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_twindl</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_echeck", "modulename": "pycharmm.dynamics", "qualname": "set_echeck", "kind": "function", "doc": "<p>Set the total energy change tolerance for each step</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_echeck</strong> (float):\nthe new energy change tolerance</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: old energy change tolerance</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_echeck</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_nsavc", "modulename": "pycharmm.dynamics", "qualname": "set_nsavc", "kind": "function", "doc": "<p>Set the freq for saving coords to file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_nsavc</strong> (int):\nthe new frequency for saving coords to file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: the old frequency for saving coords to file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_nsavc</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_nsavv", "modulename": "pycharmm.dynamics", "qualname": "set_nsavv", "kind": "function", "doc": "<p>Set the frequence for saving velocities to file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_nsavv</strong> (int):\nthe new frequency for seving velocities to file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: the old frequency for seving velocities to file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_nsavv</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_fbetas", "modulename": "pycharmm.dynamics", "qualname": "set_fbetas", "kind": "function", "doc": "<p>Set friction coefficients for atoms for Langevin dynamics</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fbetas</strong> (list[float]):\nlength natom, set atom i friction coefficient to fbetas[i]</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: old friction coefficients for the atoms</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fbetas</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_iunwri", "modulename": "pycharmm.dynamics", "qualname": "set_iunwri", "kind": "function", "doc": "<p>Open a unit to use for writing the restart file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (string):\nnew file path to write</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: true if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_iuncrd", "modulename": "pycharmm.dynamics", "qualname": "set_iuncrd", "kind": "function", "doc": "<p>Open a unit to use for writing the coordinate file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (string):\nnew file path to write</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: true if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.set_iunrea", "modulename": "pycharmm.dynamics", "qualname": "set_iunrea", "kind": "function", "doc": "<p>Open a unit to read the restart file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (string):\nnew file path to read</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: true if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.run", "modulename": "pycharmm.dynamics", "qualname": "run", "kind": "function", "doc": "<p>Execute a dynamics run for the current system</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>init_velocities</strong> (dict):\ninitial velocity for each atom; 'vx', 'vy', and 'vz' each list[float]</li>\n<li><strong>**kwargs</strong> (dict):\nnames and values from OPTIONS (see _configure function)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: a dataframe with index equal to step number and columns named for the\ntraditional dynamics energy output entry names</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">init_velocities</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.get_ktable", "modulename": "pycharmm.dynamics", "qualname": "get_ktable", "kind": "function", "doc": "<p>Get the ktable from the last CHARMM dynamics run</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>table</strong> (pandas.core.frame.DataFrame):\na dataframe with columns step number, time,\nsome energy properties, some energy terms, and\n(for constant pressure simulations) some pressures</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.get_velos", "modulename": "pycharmm.dynamics", "qualname": "get_velos", "kind": "function", "doc": "<p>Get the velos from the last CHARMM dynamics run</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>table</strong> (pandas.core.frame.DataFrame):\na dataframe with columns step number, time,\nsome energy properties, some energy terms, and\n(for constant pressure simulations) some pressures</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.get_lambdata_bias", "modulename": "pycharmm.dynamics", "qualname": "get_lambdata_bias", "kind": "function", "doc": "<p>Get the lambdata_bias from the last CHARMM dynamics run</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>table</strong> (pandas.core.frame.DataFrame):\na dataframe with columns step number, time,\nsome energy properties, some energy terms, and\n(for constant pressure simulations) some pressures</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.get_lambdata_bixlamsq", "modulename": "pycharmm.dynamics", "qualname": "get_lambdata_bixlamsq", "kind": "function", "doc": "<p>Get the lambdata_bixlamsq from the last CHARMM dynamics run</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>table</strong> (pandas.core.frame.DataFrame):\na dataframe with columns step number, time,\nsome energy properties, some energy terms, and\n(for constant pressure simulations) some pressures</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.get_msldata_step", "modulename": "pycharmm.dynamics", "qualname": "get_msldata_step", "kind": "function", "doc": "<p>Get msld step data from the last step of a CHARMM dynamics run</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><p><strong>table</strong> (pandas.core.frame.DataFrame):\na dataframe with columns step number, time,\nand some msld related parameters:</p>\n\n<p>NBLOCKS: number of blocks (including block 1, the environment)</p>\n\n<p>NBIASV: number of variable biases</p>\n\n<p>NSITES: number of sites (including the environment)</p>\n\n<p>TBLD: temperature for lambda dynamics</p>\n\n<p>FCNFORM: functional form for mapping between theta and lambda</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.get_msldata_bias", "modulename": "pycharmm.dynamics", "qualname": "get_msldata_bias", "kind": "function", "doc": "<p>Get msld variable biases related data from the last step \n   of a CHARMM dynamics run.</p>\n\n<p>See CHARMM documentation \n   <a href=\"https://academiccharmm.org/documentation/version/c47b1/block\">block</a>\n   LDBV for more information</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nbiasv</strong> (integer):\nthe number of variable bias rows</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><p><strong>table</strong> (pandas.core.frame.DataFrame):\na dataframe with columns:</p>\n\n<p>IBVIDI: index of the first block</p>\n\n<p>IBVIDJ: index of the second block </p>\n\n<p>IBCLAS: class of functional form</p>\n\n<p>IRREUP: REF, equilibrium distances of upper-bound biasing potentia</p>\n\n<p>IRRLOW: equilibrium distances of lower-bound biasing potential</p>\n\n<p>IKBIAS: CFORCE, force constants</p>\n\n<p>IPBIAS: NPOWER, integer power of biasing potential</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nbiasv</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.get_msldata_blocks", "modulename": "pycharmm.dynamics", "qualname": "get_msldata_blocks", "kind": "function", "doc": "<p>Get msld block data from the last step of a CHARMM dynamics run</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nblocks</strong> (integer):\nthe number of block rows</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><p><strong>table</strong> (pandas.core.frame.DataFrame):\na dataframe with columns:</p>\n\n<p>ISITE : site index</p>\n\n<p>BIELAM : fixed bias</p>\n\n<p>BIXLAM : lambda value</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nblocks</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.get_msldata_nsubs", "modulename": "pycharmm.dynamics", "qualname": "get_msldata_nsubs", "kind": "function", "doc": "<p>Get msld subsite data from the last step of a CHARMM dynamics run</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nsites</strong> (integer):\nthe number of sites</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>table</strong> (pandas.core.frame.DataFrame):\na dataframe with nsites unnamed columns</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nsites</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.get_msldata_thetas", "modulename": "pycharmm.dynamics", "qualname": "get_msldata_thetas", "kind": "function", "doc": "<p>Get msld theta data from the last step of a CHARMM dynamics run</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nsites</strong> (integer):\nthe number of sites</li>\n<li><strong>nsubs</strong> (pandas.DataFrame):\nthe number of subsites for each site</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>table</strong> (pandas.core.frame.DataFrame):\na dataframe with nsites theta values and unnamed columns</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nsites</span>, </span><span class=\"param\"><span class=\"n\">nsubs</span><span class=\"o\">=</span><span class=\"n\">Empty</span> <span class=\"n\">DataFrame</span>\n<span class=\"n\">Columns</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n<span class=\"n\">Index</span><span class=\"p\">:</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.get_msldata", "modulename": "pycharmm.dynamics", "qualname": "get_msldata", "kind": "function", "doc": "<p>Get MSLD related data from the last step of a CHARMM dynamics run</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><p><strong>msldata</strong> (dict):\nkeys are 'steps', 'biases', 'blocks', 'nsubs' (if present) and 'thetas'.</p>\n\n<p>'steps': general msld settings, eg., number of blocks, number of variable biases,\n        number of sites, temperature for lambda dynamics, functional form for\n        mapping between theta and lambda</p>\n\n<p>'biases': settings related to viariable biases</p>\n\n<p>'blocks': site index, lambda value of each substituent</p>\n\n<p>'nsubs': number of substituents at each site</p>\n\n<p>'thetas': theta of each substituent</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.dynamics.DynamicsScript", "modulename": "pycharmm.dynamics", "qualname": "DynamicsScript", "kind": "class", "doc": "<p>Settings results, and methods for molecular dynamics runs</p>\n", "bases": "pycharmm.script.CommandScript"}, {"fullname": "pycharmm.dynamics.DynamicsScript.__init__", "modulename": "pycharmm.dynamics", "qualname": "DynamicsScript.__init__", "kind": "function", "doc": "<p>Class constructor</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ktable</strong> (bool):\nCollect final ktable data at the end of a dynamics run?</li>\n<li><strong>velos</strong> (bool):\nCollect final velocities at the end of a dynamics runs?</li>\n<li><strong>msldata</strong> (bool):\nCollect final MSLD related data at the end of a dynamics run?</li>\n<li><strong>**kwargs</strong> (dict):\nSee CHARMM documentation \n<a href=\"https://academiccharmm.org/documentation/version/c47b1/dynamc\">dynamc</a></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ktable</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">velos</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">lambdata</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">msldata</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pycharmm.dynamics.DynamicsScript.run", "modulename": "pycharmm.dynamics", "qualname": "DynamicsScript.run", "kind": "function", "doc": "<p>Run the dynamics simulation</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>append</strong> (str):\nadditional commands/options for\nthe charmm command parser</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">append</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy", "modulename": "pycharmm.energy", "kind": "module", "doc": "<p>Evaluation and manipulation of the potential energy of a macromolecular system.</p>\n\n<p>Corresponds to CHARMM command <code>ENERgy</code> <br />\nSee <a href=\"https://academiccharmm.org/documentation/version/c47b1/energy\">ENERgy documentation</a></p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.energy</span> <span class=\"k\">as</span> <span class=\"nn\">energy</span>\n</code></pre>\n</div>\n\n<p>Print out all the energy terms  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">energy</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.energy.show", "modulename": "pycharmm.energy", "qualname": "show", "kind": "function", "doc": "<p>Print the energy table.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_total", "modulename": "pycharmm.energy", "qualname": "get_total", "kind": "function", "doc": "<p>Return the current TOTE energy property (total energy)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tote : float <br />\n    the current TOTE</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_eprop", "modulename": "pycharmm.energy", "qualname": "get_eprop", "kind": "function", "doc": "<p>Return the energy property from the eprop array at index prop_index</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prop_index</strong> (int):\nindex corresponding to the desired energy term</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: eprop(prop_index)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prop_index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_grms", "modulename": "pycharmm.energy", "qualname": "get_grms", "kind": "function", "doc": "<p>Return the current GRMS energy property</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: the current GRMS</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_eterm", "modulename": "pycharmm.energy", "qualname": "get_eterm", "kind": "function", "doc": "<p>Return the energy term at index term_index in the eterm array</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>term_index</strong> (int):\nindex in the eterm array</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: the current energy term from eterm(<code>term_index</code>)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">term_index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_bonded", "modulename": "pycharmm.energy", "qualname": "get_bonded", "kind": "function", "doc": "<p>Return the current bond energy term </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: the current bond energy term</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_angle", "modulename": "pycharmm.energy", "qualname": "get_angle", "kind": "function", "doc": "<p>Return the current angle energy term </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: the current angle energy term</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_urey", "modulename": "pycharmm.energy", "qualname": "get_urey", "kind": "function", "doc": "<p>Return the current Urey-Bradley energy term </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Urey-Bradley energy term</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_dihedral", "modulename": "pycharmm.energy", "qualname": "get_dihedral", "kind": "function", "doc": "<p>Return the current dihedral energy term</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Dihedral energy term</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_improper", "modulename": "pycharmm.energy", "qualname": "get_improper", "kind": "function", "doc": "<p>Return the current improper energy term </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Improper energy term</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_vdw", "modulename": "pycharmm.energy", "qualname": "get_vdw", "kind": "function", "doc": "<p>Return the current van der Waals energy term </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: the current van der Waals energy term</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_elec", "modulename": "pycharmm.energy", "qualname": "get_elec", "kind": "function", "doc": "<p>Return the current electrostatic energy term </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: the current electrostatic energy term</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_num_properties", "modulename": "pycharmm.energy", "qualname": "get_num_properties", "kind": "function", "doc": "<p>Return the current number of properties</p>\n\n<p>This count includes non-active properties according to qeprop\n(len eprop array)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: total number of properties</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_property", "modulename": "pycharmm.energy", "qualname": "get_property", "kind": "function", "doc": "<p>Return the energy property from the <code>eprop</code> array at index</p>\n\n<p>Reads eprop(index) from the CHARMM shared library</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (int):\nindex of property according to CHARMM</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: the value of the property stored in CHARMM</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_property_name_size", "modulename": "pycharmm.energy", "qualname": "get_property_name_size", "kind": "function", "doc": "<p>Return the character count for each property name in CHARMM</p>\n\n<p>This count is fixed in CHARMM. <br />\nDoes not include the C string termination char</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: length of the property name</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_property_names", "modulename": "pycharmm.energy", "qualname": "get_property_names", "kind": "function", "doc": "<p>Get a list of all energy properties</p>\n\n<p>This list of names includes non-active properties according to qeprop. <br />\nThis list is just the ceprop array</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[str]</strong>: a list of all energy properties stored in CHARMM</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_property_by_name", "modulename": "pycharmm.energy", "qualname": "get_property_by_name", "kind": "function", "doc": "<p>Return the value of the named energy property</p>\n\n<p>Returns <code>eprop(index)</code> where index satisfies <code>ceprop(index) == name</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong> (str):\nname of desired property</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: value of named property</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_property_statuses", "modulename": "pycharmm.energy", "qualname": "get_property_statuses", "kind": "function", "doc": "<p>Get a list of the status for each energy property.  </p>\n\n<p>This list includes non-active properties. <br />\nThis list is just the qeprop array.  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[bool]</strong>: a list of the status for each energy property stored in CHARMM</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_properties", "modulename": "pycharmm.energy", "qualname": "get_properties", "kind": "function", "doc": "<p>Get a list of the value for each energy property</p>\n\n<p>This list includes non-active properties according to qeprop. <br />\nThis list is just the eprop array.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: a list of the value for each energy property stored in CHARMM</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_num_terms", "modulename": "pycharmm.energy", "qualname": "get_num_terms", "kind": "function", "doc": "<p>Return the current number of terms</p>\n\n<p>This count includes non-active terms according to qeterm\n(len eterm array)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: total number of terms</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_term", "modulename": "pycharmm.energy", "qualname": "get_term", "kind": "function", "doc": "<p>Return the energy term value at index in the CHARMM shared library</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (int):\nindex of the term in CHARMM</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: the current energy term from eterm(index)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_term_name_size", "modulename": "pycharmm.energy", "qualname": "get_term_name_size", "kind": "function", "doc": "<p>Return the num of chars of each energy term name from CHARMM</p>\n\n<p>Returns the fixed size of each elt of the ceterm array. <br />\nDoes not include the C string termination character</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: the size of the name for each energy term</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_term_names", "modulename": "pycharmm.energy", "qualname": "get_term_names", "kind": "function", "doc": "<p>Get a list of all energy term names</p>\n\n<p>This list of names includes non-active terms according to qeterm. <br />\nThis list is just the ceterm array</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[str]</strong>: a list of all energy term names stored in CHARMM</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_term_by_name", "modulename": "pycharmm.energy", "qualname": "get_term_by_name", "kind": "function", "doc": "<p>Return the named energy term from the eterm array</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Value of the named energy term from the <code>eterm</code> array</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_term_statuses", "modulename": "pycharmm.energy", "qualname": "get_term_statuses", "kind": "function", "doc": "<p>Get a list of the status for each energy term</p>\n\n<p>This list includes non-active terms. <br />\nThis list is just the qeterm array</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[bool]</strong>: a list of the status for each energy term stored in CHARMM</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_terms", "modulename": "pycharmm.energy", "qualname": "get_terms", "kind": "function", "doc": "<p>Get a list of the value for each energy term</p>\n\n<p>This list includes non-active terms according to qeprop. <br />\nThis list is just the eterm array</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: a list of the value for each energy term stored in CHARMM</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_old_energy", "modulename": "pycharmm.energy", "qualname": "get_old_energy", "kind": "function", "doc": "<p>Return the ENER term from the previous energy update.  </p>\n\n<p>This may differ substantially from the current value of ENER.  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: the <em>ENER</em> term from the previous energy update</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_energy_change", "modulename": "pycharmm.energy", "qualname": "get_energy_change", "kind": "function", "doc": "<p>Returns the change in ENER (float) from the penultimate and the last energy update.  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: <code>get_old_energy() - get_property_by_name('ENER')</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_delta_e", "modulename": "pycharmm.energy", "qualname": "get_delta_e", "kind": "function", "doc": "<p>Return the current Delta-E energy property. <br />\nAn alias for <code>get_energy_change()</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy.get_energy", "modulename": "pycharmm.energy", "qualname": "get_energy", "kind": "function", "doc": "<p>Get a Pandas dataframe of <em>ENER</em>, <em>GRMS</em>, and all active eterms</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.core.frame.DataFrame</strong>: Dataframe with columns <em>ENER</em>, <em>GRMS</em>, and eterm names</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy_func", "modulename": "pycharmm.energy_func", "kind": "module", "doc": "<p>A class to set or just store a python function to run during an energy calculation</p>\n"}, {"fullname": "pycharmm.energy_func.EnergyFunc", "modulename": "pycharmm.energy_func", "qualname": "EnergyFunc", "kind": "class", "doc": "<p>A class to set or just store a python function to run during an energy calculation</p>\n"}, {"fullname": "pycharmm.energy_func.EnergyFunc.__init__", "modulename": "pycharmm.energy_func", "qualname": "EnergyFunc.__init__", "kind": "function", "doc": "<p>class constructor</p>\n\n<p>The <code>py_func</code> parameter should be a python function that takes 7 arguments: <br />\n<code>natoms</code>: the integer number of elements in the next six arrays <br />\n<code>x_pos</code>, <code>y_pos</code>, <code>z_pos</code>: double precision floating point arrays of atom positions <br />\n<code>dx</code>, <code>dy</code>, <code>dz</code>: double precision floating point arrays  </p>\n\n<p>Inside the <code>py_func</code> function, the array arguments must be updated element by element\nsince they are passed at C pointers. Slicing on the left hand side of an equal sign\nwill not work for updating elements. List comprehensions on the right hand side\nprobably will not either.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>py_func</strong> (callable python function):\na python function to run during energy calculations</li>\n<li><strong>set_func_now</strong> (bool, default = True):\njust store the function and don't run it during future calcs</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">py_func</span>, </span><span class=\"param\"><span class=\"n\">set_func_now</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "pycharmm.energy_func.EnergyFunc.set_func", "modulename": "pycharmm.energy_func", "qualname": "EnergyFunc.set_func", "kind": "function", "doc": "<p>Set the stored function or a new function to run during energy calcs.</p>\n\n<p>The <code>py_func</code> parameter should be a python function that takes 7 arguments: <br />\n<code>natoms</code>: the integer number of elements in the next six arrays <br />\n<code>x_pos</code>, <code>y_pos</code>, <code>z_pos</code>: double precision floating point arrays of atom positions <br />\n<code>dx</code>, <code>dy</code>, <code>dz</code>: double precision floating point arrays  </p>\n\n<p>Inside the <code>py_func</code> function, the array arguments must be updated element by element\nsince they are passed at C pointers. Slicing on the left hand side of an equal sign\nwill not work for updating elements. List comprehensions on the right hand side\nprobably will not either.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>py_func</strong> (callable python function):\nA python function to run during energy calculations</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">py_func</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy_func.EnergyFunc.unset_func", "modulename": "pycharmm.energy_func", "qualname": "EnergyFunc.unset_func", "kind": "function", "doc": "<p>Just store the function and do not run it during energy calculations</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.energy_mlpot", "modulename": "pycharmm.energy_mlpot", "kind": "module", "doc": "<p>A class to set PhysNet model to run during an energy calculation</p>\n"}, {"fullname": "pycharmm.energy_mlpot.MLpot", "modulename": "pycharmm.energy_mlpot", "qualname": "MLpot", "kind": "class", "doc": "<p>Custom Machine Learning potential</p>\n"}, {"fullname": "pycharmm.energy_mlpot.MLpot.__init__", "modulename": "pycharmm.energy_mlpot", "qualname": "MLpot.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ml_selection</strong> (pycharmm selection):\nML atom selection</li>\n<li><strong>ml_fq</strong> (bool):\nFluctuating ML atom charges for ML/MM electrostatic interaction</li>\n<li><strong>**kwargs</strong> (dict):\nAdditional model keyword arguments</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ml_selection</span>, </span><span class=\"param\"><span class=\"n\">ml_fq</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pycharmm.energy_mlpot.MLpot.unset_mlpot", "modulename": "pycharmm.energy_mlpot", "qualname": "MLpot.unset_mlpot", "kind": "function", "doc": "<p>Just store the function and do not run it during energy calcs</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.fict", "modulename": "pycharmm.fict", "kind": "module", "doc": "<p>A class to simulate a Python dict accessible from Fortran and C</p>\n"}, {"fullname": "pycharmm.fict.fictvaldispatch", "modulename": "pycharmm.fict", "qualname": "fictvaldispatch", "kind": "function", "doc": "<p>A simple decorator to do single dispatch on the 3rd arg</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.fict.fictkeydispatch", "modulename": "pycharmm.fict", "qualname": "fictkeydispatch", "kind": "function", "doc": "<p>A simple decorator to do single dispatch on the 2nd arg</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.fict.Fict", "modulename": "pycharmm.fict", "qualname": "Fict", "kind": "class", "doc": "<p>Like a python dict but accessible also from Fortran and C</p>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>set(key, val) : \n    associates key with val in the dictionary</p>\n\n<p>get(key, default=None) :\n    gets the val associated with key.\n    If default is provided and key not found, returns default.\n    Otherwise, raises KeyError</p>\n\n<p>remove(key) :\n    removes key from the dictionary.\n    Returns True if key was found.\n    Otherwise returns False</p>\n"}, {"fullname": "pycharmm.fict.Fict.__init__", "modulename": "pycharmm.fict", "qualname": "Fict.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fict_lib_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fict_lib</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pycharmm.fict.Fict.set", "modulename": "pycharmm.fict", "qualname": "Fict.set", "kind": "function", "doc": "<p>Associates key with val in the dictionary</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong> (str):\nassociate this name with val in the dictionary</li>\n<li><strong>val</strong> (bool, double, int, or str):\nthis value will be associate with key for retrieval</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>: if val is not bool, float, int, or str, raise TypeError</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if key's val was replaced, False if key is new</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">val</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.fict.Fict.get", "modulename": "pycharmm.fict", "qualname": "Fict.get", "kind": "function", "doc": "<p>Gets the val associated with key</p>\n\n<p>If default is provided and key not found, returns default.\nOtherwise, raises KeyError</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong> (str):\nlook for this name in dictionary</li>\n<li><strong>default</strong> (optional):\nreturn this if key not found in dictionary</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError</strong>: if default is not provided and key not found, raise KeyError</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool, real, int, or str</strong>: if key is in dictionary, then return associated val</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.fict.Fict.remove", "modulename": "pycharmm.fict", "qualname": "Fict.remove", "kind": "function", "doc": "<p>Removes key from the dictionary</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong> (str):\nremove this name in dictionary</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if key in dictionary, False otherwise</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.generate", "modulename": "pycharmm.generate", "kind": "module", "doc": "<p>Functions to construct and manipulate the PSF </p>\n\n<p>The central data structure in CHARMM, the PSF holds lists giving every <br />\nbond, bond angle, torsion angle, and improper torsion angle <br />\nas well as information needed to generate the hydrogen bonds and <br />\nthe non-bonded list.  </p>\n\n<p>Corresponds to CHARMM module <code>struct</code> <br />\nSee <a href=\"https://academiccharmm.org/documentation/version/c47b1/struct#Top\">struct documentation</a> </p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.generate</span> <span class=\"k\">as</span> <span class=\"nn\">gen</span>\n</code></pre>\n</div>\n\n<p>Generate a segment called <code>ADP</code> and apply <code>ACE</code> and <code>CT3</code> patches on the N- and C- terminals</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gen</span><span class=\"o\">.</span><span class=\"n\">new_segment</span><span class=\"p\">(</span><span class=\"s1\">&#39;ADP&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ACE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;CT3&#39;</span><span class=\"p\">,</span> <span class=\"n\">setup_ic</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Generate a segment called <code>WT00</code> and <em>DO NOT</em> rewrite angles and dihedrals for molecules in the segment</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gen</span><span class=\"o\">.</span><span class=\"n\">new_segment</span><span class=\"p\">(</span><span class=\"s1\">&#39;WT00&#39;</span><span class=\"p\">,</span> <span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">dihedral</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.generate.OPTIONS", "modulename": "pycharmm.generate", "qualname": "OPTIONS", "kind": "class", "doc": "<p>A ctypes structure to hold settings to generate a new segment.</p>\n\n<p>Attributes are listed by name, type, charmm input script equivalent,\ndefault value and a short description.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>new_segid</strong> (str):\nname of the new segment</li>\n<li><strong>dup_seg</strong> (str):\nDUPL name of segment to clone</li>\n<li><strong>patf</strong> (str):\nFIRS DEFA patch residue name for terminating residue</li>\n<li><strong>patl</strong> (str):\nLAST DEFA patch residue name for terminating residue</li>\n<li><strong>ldrude</strong> (int):\nDRUD 0 create drude particles?</li>\n<li><strong>lsetic</strong> (int):\nSETU 0 append ic table from topo file to main ic table?</li>\n<li><strong>lwarn</strong> (int):\nWARN 0 list elts deleted due to nonexistant atoms?</li>\n<li><strong>lshow</strong> (int):\nSHOW 0</li>\n<li><strong>langle</strong> (int):\nANGL/NOAN autot overide autogen option from topo file?</li>\n<li><strong>lphi</strong> (int):\nDIHE/NODI autod overide autogen option from topo file?</li>\n<li><strong>dmass</strong> (float):\nDMAS 0.0</li>\n</ul>\n", "bases": "_ctypes.Structure"}, {"fullname": "pycharmm.generate.OPTIONS.new_seg", "modulename": "pycharmm.generate", "qualname": "OPTIONS.new_seg", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.generate.OPTIONS.dup_seg", "modulename": "pycharmm.generate", "qualname": "OPTIONS.dup_seg", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.generate.OPTIONS.patf", "modulename": "pycharmm.generate", "qualname": "OPTIONS.patf", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.generate.OPTIONS.patl", "modulename": "pycharmm.generate", "qualname": "OPTIONS.patl", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.generate.OPTIONS.ldrude", "modulename": "pycharmm.generate", "qualname": "OPTIONS.ldrude", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.generate.OPTIONS.lsetic", "modulename": "pycharmm.generate", "qualname": "OPTIONS.lsetic", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.generate.OPTIONS.lwarn", "modulename": "pycharmm.generate", "qualname": "OPTIONS.lwarn", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.generate.OPTIONS.lshow", "modulename": "pycharmm.generate", "qualname": "OPTIONS.lshow", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.generate.OPTIONS.langle", "modulename": "pycharmm.generate", "qualname": "OPTIONS.langle", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.generate.OPTIONS.lphi", "modulename": "pycharmm.generate", "qualname": "OPTIONS.lphi", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.generate.OPTIONS.dmass", "modulename": "pycharmm.generate", "qualname": "OPTIONS.dmass", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.generate.new_segment", "modulename": "pycharmm.generate", "qualname": "new_segment", "kind": "function", "doc": "<p>Add the next segment to the PSF and name it <code>seg_name</code></p>\n\n<p>This function will cause any internal coordinate table entries\n(IC) from the topology file to be appended to the main IC table.\nThis function uses the sequence of residues specified in the last\ninput_sequence function and the information stored in the residue\ntopology file to add the next segment to the PSF.  </p>\n\n<p>Each segment contains a list of all the bonds, angles,\ndihedral angles, and improper torsions needed to calculate the energy.  </p>\n\n<p>It also assigns charges to all the atoms, sets up the\nnonbonded exclusions list, and specifies hydrogen bond donors and\nacceptors. Any internal coordinate which references atoms outside\nthe range of the segment is deleted. This prevents any\nunexpected bonding of segments.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>seg_name</strong> (str):\nname for the new segment</li>\n<li><strong>first_patch</strong> (str):\nname of the patch applied to the N-terminal</li>\n<li><strong>last_patch</strong> (str):\nname of the patch applied to the C-terminal</li>\n<li><strong>**kwargs</strong> (optional):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: 1 indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seg_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">first_patch</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">last_patch</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.generate.setup_seg", "modulename": "pycharmm.generate", "qualname": "setup_seg", "kind": "function", "doc": "<p>Add the next segment to the PSF and name it <code>seg</code></p>\n\n<p>This function will cause any internal coordinate table entries\n(IC) from the topology file to be appended to the main IC table.\nThis function uses the sequence of residues specified in the last\ninput_sequence function and the information stored in the residue\ntopology file to add the next segment to the PSF. Each segment contains a\nlist of all the bonds, angles, dihedral angles, and improper torsions\nneeded to calculate the energy. It also assigns charges to all the\natoms, sets up the nonbonded exclusions list, and specifies hydrogen\nbond donors and acceptors. Any internal coordinate which references\natoms outside the range of the segment is deleted. This prevents any\nunexpected bonding of segments.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>seg</strong> (str):\nname for the new segment</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: 1 indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.generate.patch", "modulename": "pycharmm.generate", "qualname": "patch", "kind": "function", "doc": "<p>Patch a segment in the PSF with <code>name</code></p>\n\n<p>This function applies patches to the sequence.  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong> (str):\nname for the patch to apply</li>\n<li><strong>patch_sites</strong> (str):\ncomma separated string of pairs\nsegid1 resid1 [, segid2 resid2 [, ... [,segid 9 resid 9]...]</li>\n<li><strong>**kwargs</strong> ([sort=bool] [awtup=bool] [warn=bool]):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True indicates success</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">patch_sites</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.grid", "modulename": "pycharmm.grid", "kind": "module", "doc": "<p>Functions for CHARMM grid and docking calculation </p>\n\n<p>Created by Yujin Wu (wyujin@umich.edu)</p>\n\n<p>See CHARMM documentation <a href=\"https://academiccharmm.org/documentation/version/c47b1/grid\">Grid</a>\nand <a href=\"https://academiccharmm.org/documentation/version/c47b1\">fftdock</a>\nfor more information</p>\n\n<h1 id=\"functions\">Functions</h1>\n\n<ul>\n<li><code>generate_with_pyopencl</code> -- generate grids for a given structure</li>\n</ul>\n"}, {"fullname": "pycharmm.grid.Grid", "modulename": "pycharmm.grid", "qualname": "Grid", "kind": "class", "doc": "<p>Settings for python Class Grid </p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>xCen</strong> (float):\nx-axis center of the grid box</li>\n<li><strong>yCen</strong> (float):\ny-axis center of the grid box</li>\n<li><strong>zCen</strong> (float):\nz-axis center of the grid box</li>\n<li><strong>xMax</strong> (float):\nlength of the grid box along x-axis</li>\n<li><strong>yMax</strong> (float):\nlength of the grid box along y-axis</li>\n<li><strong>zMax</strong> (float):\nlength of the grid box along z-axis</li>\n<li><strong>rcta</strong> (float):\nleft cutoff of the customizable grid</li>\n<li><strong>rctb</strong> (float):\nright cutoff of the customizable grid</li>\n<li><strong>hMax</strong> (float):\nwelldepth of the customizable grid</li>\n<li><strong>dGrid</strong> (float):\ngrid space</li>\n<li><strong>emax</strong> (float):\nVdwEmax</li>\n<li><strong>maxe</strong> (float):\nelecReplEmax</li>\n<li><strong>mine</strong> (float):\nelecAttrEmax</li>\n<li><strong>dielec</strong> (float):\ndielectric constant</li>\n<li><strong>gridForce</strong> (float):\ngrid edge force</li>\n<li><strong>probes</strong> (str):\nprobe segment ID</li>\n<li><strong>gpuID</strong> (int):\ngpu ID for gpu grid generation</li>\n<li><strong>gridU</strong> (int):\nunit for access grid file</li>\n<li><strong>probeU</strong> (int):\nunit for access probe file for gpu grid gen</li>\n<li><strong>flag_gpu</strong> (bool):\nTrue for use GPU, False for CPU</li>\n<li><strong>flag_rdie</strong> (bool):\nTrue for rdie, False for cdie</li>\n<li><strong>flag_form</strong> (bool):\nTrue for formatted output, False for binary</li>\n<li><strong>flag_grhb</strong> (bool):\nTrue for turn on customizable hbond grids</li>\n<li><strong>gridFile</strong> (str):\ngrid file name</li>\n<li><strong>probeFile</strong> (str):\nprobe file name</li>\n<li><strong>nbond_opt</strong> (dict):\nnbond option, use default setups</li>\n</ul>\n", "bases": "_ctypes.Structure"}, {"fullname": "pycharmm.grid.Grid.__init__", "modulename": "pycharmm.grid", "qualname": "Grid.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xCen</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">yCen</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">zCen</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">xMax</span><span class=\"o\">=</span><span class=\"mf\">10.0</span>,</span><span class=\"param\">\t<span class=\"n\">yMax</span><span class=\"o\">=</span><span class=\"mf\">10.0</span>,</span><span class=\"param\">\t<span class=\"n\">zMax</span><span class=\"o\">=</span><span class=\"mf\">10.0</span>,</span><span class=\"param\">\t<span class=\"n\">rcta</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">rctb</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">hMax</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">dGrid</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">emax</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">maxe</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">mine</span><span class=\"o\">=-</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">dielec</span><span class=\"o\">=</span><span class=\"mf\">3.0</span>,</span><span class=\"param\">\t<span class=\"n\">gridForce</span><span class=\"o\">=</span><span class=\"mf\">300.0</span>,</span><span class=\"param\">\t<span class=\"n\">probes</span><span class=\"o\">=</span><span class=\"s1\">&#39;PROB&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">gpuID</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">gridU</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">probeU</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">flag_gpu</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flag_rdie</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flag_form</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">flag_grhb</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">gridFile</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">probeFile</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nbond_opt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pycharmm.grid.Grid.setVar", "modulename": "pycharmm.grid", "qualname": "Grid.setVar", "kind": "function", "doc": "<p>Check and set up the variables</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>var</strong> (python built-in types):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>AttributeError</strong>: if the variables is not decleard in the Grid class.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">var</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.grid.Grid.generate", "modulename": "pycharmm.grid", "qualname": "Grid.generate", "kind": "function", "doc": "<p>Generate grids for docking</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: one indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.grid.CDOCKER", "modulename": "pycharmm.grid", "qualname": "CDOCKER", "kind": "class", "doc": "<p>Settings for python Class CDOCKER</p>\n", "bases": "Grid"}, {"fullname": "pycharmm.grid.CDOCKER.__init__", "modulename": "pycharmm.grid", "qualname": "CDOCKER.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>selection</strong> (pycharmm.SelectAtoms):\nselection of atoms that are used for grid energy calculation</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pycharmm.grid.CDOCKER.read", "modulename": "pycharmm.grid", "qualname": "CDOCKER.read", "kind": "function", "doc": "<p>Read grid on selected atoms</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (int):\none indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.grid.CDOCKER.on", "modulename": "pycharmm.grid", "qualname": "CDOCKER.on", "kind": "function", "doc": "<p>Turn on grid energy calculation</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (int):\none indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.grid.CDOCKER.off", "modulename": "pycharmm.grid", "qualname": "CDOCKER.off", "kind": "function", "doc": "<p>Turn off grid energy calculation</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (int):\none indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.grid.CDOCKER.clear", "modulename": "pycharmm.grid", "qualname": "CDOCKER.clear", "kind": "function", "doc": "<p>Clear grid, free memory allocation for grid calculation</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (int):\none indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.grid.OMMD", "modulename": "pycharmm.grid", "qualname": "OMMD", "kind": "class", "doc": "<p>Settings for python Class OMMD </p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>numCopy</strong> (int):\nNumber of copies in parallel simulated annealing</li>\n<li><strong>softGridUnit</strong> (int):\nunit for access soft grid file</li>\n<li><strong>hardGridUnit</strong> (int):\nunit for access hard grid file</li>\n<li><strong>softGridFile</strong> (str):\nsoft grid file name</li>\n<li><strong>hardGridFile</strong> (str):\nhard grid file name</li>\n<li><strong>flag_form</strong> (bool):\nTrue for formatted output, false for binary</li>\n<li><strong>flag_grhb</strong> (bool):\nTrue for turn on customizable hbond grids</li>\n<li><strong>fix_select</strong> (list?):\nSelection of fixed atoms</li>\n<li><strong>flex_select</strong> (list?):\nSelection of flexible atoms</li>\n<li><strong>soft</strong> (float):\nPercentage of soft grid potential</li>\n<li><strong>hard</strong> (float):\nPercentage of hard grid potential</li>\n<li><strong>emax</strong> (float):\nVdwEmax</li>\n<li><strong>mine</strong> (float):\nelecAttrEmax</li>\n<li><strong>maxe</strong> (float):\nelecReplEmax</li>\n<li><strong>eps</strong> (float):\ndielectric constant</li>\n<li><strong>steps</strong> (int):\nnumber of simulation steps</li>\n<li><strong>heatFrq</strong> (int):\nheat frequence</li>\n<li><strong>startTemp</strong> (float):\nstarting temperatue</li>\n<li><strong>endTemp</strong> (float):\nend temperature</li>\n<li><strong>incrTemp</strong> (float):\nincreasement of temperature</li>\n</ul>\n", "bases": "Grid"}, {"fullname": "pycharmm.grid.OMMD.__init__", "modulename": "pycharmm.grid", "qualname": "OMMD.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">numCopy</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">softGridUnit</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">hardGridUnit</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">softGridFile</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">hardGridFile</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">flag_form</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">flag_grhb</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fix_select</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">flex_select</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">soft</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">hard</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">emax</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">mine</span><span class=\"o\">=-</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">maxe</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">10000</span>,</span><span class=\"param\">\t<span class=\"n\">heatFrq</span><span class=\"o\">=</span><span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">startTemp</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">endTemp</span><span class=\"o\">=</span><span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">incrTemp</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, {"fullname": "pycharmm.grid.OMMD.create", "modulename": "pycharmm.grid", "qualname": "OMMD.create", "kind": "function", "doc": "<p>Create the OpenMM docking system</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (int):\none indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.grid.OMMD.energy", "modulename": "pycharmm.grid", "qualname": "OMMD.energy", "kind": "function", "doc": "<p>Calculate and print OpenMM docking system energy</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (int):\none indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.grid.OMMD.set_coor", "modulename": "pycharmm.grid", "qualname": "OMMD.set_coor", "kind": "function", "doc": "<p>Set OpenMM docking flex part atom positions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>idxCopy</strong> (int):\nindex of the OpenMM docking copy</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (int):\none indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idxCopy</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.grid.OMMD.copy_coor", "modulename": "pycharmm.grid", "qualname": "OMMD.copy_coor", "kind": "function", "doc": "<p>Copy OpenMM docking flex part atom positions to main coordinates</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>idxCopy</strong> (int):\nindex of the OpenMM docking copy</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (int):\none indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idxCopy</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.grid.OMMD.change_softness", "modulename": "pycharmm.grid", "qualname": "OMMD.change_softness", "kind": "function", "doc": "<p>Change grid softness</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (int):\none indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.grid.OMMD.simulated_annealing", "modulename": "pycharmm.grid", "qualname": "OMMD.simulated_annealing", "kind": "function", "doc": "<p>Run OpenMM docking simulated annealing</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (int):\none indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.grid.OMMD.clear", "modulename": "pycharmm.grid", "qualname": "OMMD.clear", "kind": "function", "doc": "<p>Clear the OpenMM docking system, free all memory allocation. </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (int):\none indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.grid.generate_with_pyopencl", "modulename": "pycharmm.grid", "qualname": "generate_with_pyopencl", "kind": "function", "doc": "<p>generate grids for a given structure</p>\n\n<p>The grid generation utilize numpy package to facilitate grid calculation on CPU.\nGrid generation requires receptor atom selection, probes atom selection, grid center,\nbox size and parameters for customizable grids. </p>\n\n<p>The generated grids are passed to api_grid.F90 to output results. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probes</strong> (array):\nprobe radii used for vdw grid generation and interpertation of grid number.</li>\n<li><strong>in_gridU</strong> (int):\nCHARMM unit for which file to access, should be the same as the unit in the previous CHARMM command.</li>\n<li><strong>in_gridForm</strong> (bool):\nTrue for txt file, False for binary file.</li>\n<li><strong>**kwargs</strong> (dict):\nnames and values for grid generation (see _configure function)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: true for success, false if there was an error</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probes</span>, </span><span class=\"param\"><span class=\"n\">gridU</span>, </span><span class=\"param\"><span class=\"n\">formatted</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">gridHBond</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.ic", "modulename": "pycharmm.ic", "kind": "module", "doc": "<p>Functions to construct cartesian coordinates from internal coordinate values  </p>\n\n<p>There are flexible editing commands for manipulating the data structure. This module, together with the coordinate manipulation commands (see the <code>coor</code> module) and the I/O commands (see the <code>charmm</code> module), provides model building functionality. <br />\nThe internal coordinate data structure can also be used for analysis purposes.  </p>\n\n<p>Corresponds to CHARMM module <code>intcor</code> <br />\nSee <a href=\"https://academiccharmm.org/documentation/version/c47b1/intcor\">intcor documentation</a>  </p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.generate</span> <span class=\"k\">as</span> <span class=\"nn\">gen</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pycharmm.ic</span> <span class=\"k\">as</span> <span class=\"nn\">ic</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">read</span><span class=\"o\">.</span><span class=\"n\">sequence_string</span><span class=\"p\">(</span><span class=\"s1\">&#39;ALA&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gen</span><span class=\"o\">.</span><span class=\"n\">new_segment</span><span class=\"p\">(</span><span class=\"n\">seg_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;ALAD&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                <span class=\"n\">first_patch</span><span class=\"o\">=</span><span class=\"s1\">&#39;ACE&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                <span class=\"n\">last_patch</span><span class=\"o\">=</span><span class=\"s1\">&#39;CT3&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                <span class=\"n\">setup_ic</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ic</span><span class=\"o\">.</span><span class=\"n\">prm_fill</span><span class=\"p\">(</span><span class=\"n\">replace_all</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ic</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"s1\">&#39;CAY&#39;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"s1\">&#39;CY&#39;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"s1\">&#39;N&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ic</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.ic.prm_fill", "modulename": "pycharmm.ic", "qualname": "prm_fill", "kind": "function", "doc": "<p>Fill internal coords with values from parameter file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>replace_all</strong> (bool):\nif true, all angle and bond vals are filled\nregardless of existing vals</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: 1 indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">replace_all</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.ic.show", "modulename": "pycharmm.ic", "qualname": "show", "kind": "function", "doc": "<p>Print the internal coordinates of a molecule</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.ic.edit_dihedral", "modulename": "pycharmm.ic", "qualname": "edit_dihedral", "kind": "function", "doc": "<p>Replace or create a dihedral angle</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>res1</strong> (int):\nresidue number for atom1</li>\n<li><strong>atom1</strong> (str):\natom name</li>\n<li><strong>res2</strong> (int):\nresidue number for atom2</li>\n<li><strong>atom2</strong> (str):\natom name</li>\n<li><strong>res3</strong> (int):\nresidue number for atom3</li>\n<li><strong>atom3</strong> (str):\natom name</li>\n<li><strong>res4</strong> (int):\nresidue number for atom4</li>\n<li><strong>atom4</strong> (str):\natom name</li>\n<li><strong>new_psi</strong> (float):\nthe new angle in degrees between the two planes</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: 1 indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">res1</span>, </span><span class=\"param\"><span class=\"n\">atom1</span>, </span><span class=\"param\"><span class=\"n\">res2</span>, </span><span class=\"param\"><span class=\"n\">atom2</span>, </span><span class=\"param\"><span class=\"n\">res3</span>, </span><span class=\"param\"><span class=\"n\">atom3</span>, </span><span class=\"param\"><span class=\"n\">res4</span>, </span><span class=\"param\"><span class=\"n\">atom4</span>, </span><span class=\"param\"><span class=\"n\">new_psi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.ic.edit_angle", "modulename": "pycharmm.ic", "qualname": "edit_angle", "kind": "function", "doc": "<p>Replace or create an angle</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>res1</strong> (int):\nresidue number for atom1</li>\n<li><strong>atom1</strong> (str):\natom name</li>\n<li><strong>res2</strong> (int):\nresidue number for atom2</li>\n<li><strong>atom2</strong> (str):\natom name</li>\n<li><strong>res3</strong> (int):\nresidue number for atom3</li>\n<li><strong>atom3</strong> (str):\natom name</li>\n<li><strong>new_angle</strong> (float):\nthe new angle in degrees</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: 1 indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">res1</span>, </span><span class=\"param\"><span class=\"n\">atom1</span>, </span><span class=\"param\"><span class=\"n\">res2</span>, </span><span class=\"param\"><span class=\"n\">atom2</span>, </span><span class=\"param\"><span class=\"n\">res3</span>, </span><span class=\"param\"><span class=\"n\">atom3</span>, </span><span class=\"param\"><span class=\"n\">new_angle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.ic.edit_dist", "modulename": "pycharmm.ic", "qualname": "edit_dist", "kind": "function", "doc": "<p>Change the distance between two atoms</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>res1</strong> (int):\nresidue number for atom1</li>\n<li><strong>atom1</strong> (str):\natom name</li>\n<li><strong>res2</strong> (int):\nresidue number for atom2</li>\n<li><strong>atom2</strong> (str):\natom name</li>\n<li><strong>new_dist</strong> (float):\nthe distance between the two atoms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: 1 indicates success, any other value indicates failure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">res1</span>, </span><span class=\"param\"><span class=\"n\">atom1</span>, </span><span class=\"param\"><span class=\"n\">res2</span>, </span><span class=\"param\"><span class=\"n\">atom2</span>, </span><span class=\"param\"><span class=\"n\">new_dist</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.ic.seed", "modulename": "pycharmm.ic", "qualname": "seed", "kind": "function", "doc": "<p>Place first three atoms for building reference</p>\n\n<p>When the cartesian coordinates are not specified for any atoms,\nthe <code>BUILd</code> command cannot be used to generate positions since all positions\nare determined relative to known positions. The <code>SEED</code> command specifies the\npositions of the three atoms. It puts the first at the origin, the second\non the x-axis, and the third in the xy-plane. The three atoms must have\nentries in the IC file corresponding to: dist 1-2, angle 1-2-3, dist 2-3.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>res1, res2, res3</strong> (int):\nresidue ids of each atom</li>\n<li><strong>atom1, atom2, atom3</strong> (str):\nname (type) of each atom</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">res1</span>, </span><span class=\"param\"><span class=\"n\">atom1</span>, </span><span class=\"param\"><span class=\"n\">res2</span>, </span><span class=\"param\"><span class=\"n\">atom2</span>, </span><span class=\"param\"><span class=\"n\">res3</span>, </span><span class=\"param\"><span class=\"n\">atom3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.ic.build", "modulename": "pycharmm.ic", "qualname": "build", "kind": "function", "doc": "<p>Determine coordinates for all unspecified atoms</p>\n\n<p>This command determines coordinates from the data in the IC file (wherever possible).\nThe user is responsible for making sure that the designation for all atoms\nis unique. In the case that the system is over specified, an atom is\nplaced on the first opportunity (no checking is done for currently placed\natoms).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.image", "modulename": "pycharmm.image", "kind": "module", "doc": "<p>Setup image centering</p>\n\n<p>Corresponds to CHARMM command <code>IMAGE</code></p>\n\n<p>See CHARMM documentation <a href=\"https://academiccharmm.org/documentation/version/c47b1/images\">IMAGES</a>\nfor more information</p>\n\n<h1 id=\"functions\">Functions</h1>\n\n<ul>\n<li><code>setup_residue</code> -- setup image centering for a residue</li>\n<li><code>setup_segment</code> -- setup image centering for a segment</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.image</span> <span class=\"k\">as</span> <span class=\"nn\">image</span>\n</code></pre>\n</div>\n\n<p>Set box center at the origin and center by segment for a segment named PROT </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">setup_segment</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"s1\">&#39;PROT&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Set box center at the origin and center by residue for water TIP3</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">setup_residue</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"s1\">&#39;TIP3&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.image.setup_residue", "modulename": "pycharmm.image", "qualname": "setup_residue", "kind": "function", "doc": "<p>Setup image centering for a residue</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>center_x</strong> (float):\nnew center for x coords</li>\n<li><strong>center_y</strong> (float):\nnew center for y coords</li>\n<li><strong>center_z</strong> (float):\nnew center for z coords</li>\n<li><strong>resname</strong> (string):\nname of residue to center on next image update</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>success</strong> (integer):\n1 == no error</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center_x</span>, </span><span class=\"param\"><span class=\"n\">center_y</span>, </span><span class=\"param\"><span class=\"n\">center_z</span>, </span><span class=\"param\"><span class=\"n\">resname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.image.setup_segment", "modulename": "pycharmm.image", "qualname": "setup_segment", "kind": "function", "doc": "<p>Setup image centering for a segment</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>center_x</strong> (float):\nnew center for x coords</li>\n<li><strong>center_y</strong> (float):\nnew center for y coords</li>\n<li><strong>center_z</strong> (float):\nnew center for z coords</li>\n<li><strong>segid</strong> (string):\nname of segment to center on next image update</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>success</strong> (integer):\n1 == no error</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center_x</span>, </span><span class=\"param\"><span class=\"n\">center_y</span>, </span><span class=\"param\"><span class=\"n\">center_z</span>, </span><span class=\"param\"><span class=\"n\">segid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.image.setup_selection", "modulename": "pycharmm.image", "qualname": "setup_selection", "kind": "function", "doc": "<p>Setup image centering for a selection of atoms</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>center_x</strong> (float):\nnew center for x coords</li>\n<li><strong>center_y</strong> (float):\nnew center for y coords</li>\n<li><strong>center_z</strong> (float):\nnew center for z coords</li>\n<li><strong>selection</strong> (pycharmm.SelectAtoms):\nselection[i] == True &lt;=&gt; atom i is selected</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>success</strong> (integer):\n1 == no error</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center_x</span>, </span><span class=\"param\"><span class=\"n\">center_y</span>, </span><span class=\"param\"><span class=\"n\">center_z</span>, </span><span class=\"param\"><span class=\"n\">selection</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.image.get_ucell", "modulename": "pycharmm.image", "qualname": "get_ucell", "kind": "function", "doc": "<p>Get unit cell edge sizes and angles</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ucell</strong> (float):\ncurrent unit cell vector x</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.image.get_ntrans", "modulename": "pycharmm.image", "qualname": "get_ntrans", "kind": "function", "doc": "<p>Get number of image cells</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ntrans</strong> (integer):\nnumber of image cells</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.image.update_bimag", "modulename": "pycharmm.image", "qualname": "update_bimag", "kind": "function", "doc": "<p>Update image - primary atoms non-bonded exclusion list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.implicit_solvent", "modulename": "pycharmm.implicit_solvent", "kind": "module", "doc": "<p>Class for CHARMM implicit solvent modules. </p>\n\n<p>Corresponds to CHARMM module <code>FACTS</code> for <em>Fast Analytical Continuum Treatment of Solvation</em> <br />\nSee <a href=\"https://academiccharmm.org/documentation/latest/facts\">FACTS documentation</a>  </p>\n\n<p>Created by Yujin Wu | wyujin@umich.edu</p>\n"}, {"fullname": "pycharmm.implicit_solvent.FACTS", "modulename": "pycharmm.implicit_solvent", "qualname": "FACTS", "kind": "class", "doc": "<p>A class used to construct a command in CHARMM scripting language and then execute it.</p>\n", "bases": "pycharmm.script.CommandScript"}, {"fullname": "pycharmm.implicit_solvent.FACTS.__init__", "modulename": "pycharmm.implicit_solvent", "qualname": "FACTS.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command</strong> (str):\nCHARMM scripting language command that will be run using pyCHARMM.</li>\n<li><p><strong>selection</strong> (pycharmm.selectAtoms):</p></li>\n<li><p><strong>**kwargs</strong> (dict, optional):\nAdditional options relevant to the <code>command</code> being run.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pycharmm.lib", "modulename": "pycharmm.lib", "kind": "module", "doc": "<p>Finds and loads the CHARMM shared library</p>\n\n<p>On importing pycharmm, this module looks for an environment variable named\n<code>CHARMM_HOME</code> to find path to CHARMM shared library. \nThe extension for the library is set\ndepending on the output of platform.system</p>\n"}, {"fullname": "pycharmm.lib.CharmmLib", "modulename": "pycharmm.lib", "qualname": "CharmmLib", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycharmm.lib.CharmmLib.__init__", "modulename": "pycharmm.lib", "qualname": "CharmmLib.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">charmm_lib_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "pycharmm.lib.CharmmLib.init_charmm", "modulename": "pycharmm.lib", "qualname": "CharmmLib.init_charmm", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.lib.CharmmLib.del_charmm", "modulename": "pycharmm.lib", "qualname": "CharmmLib.del_charmm", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.lingo", "modulename": "pycharmm.lingo", "kind": "module", "doc": "<p>Functions to parse other languages relevant to CHARMM</p>\n\n<h1 id=\"functions\">Functions</h1>\n\n<ul>\n<li><code>charmm_script</code> -- evaluate a line of native CHARMM script</li>\n<li><code>get_energy_value</code> -- get the value of CHARMM substitution parameters</li>\n<li><code>get_charmm_variable</code> -- get the value of a variable in CHARMM</li>\n<li><code>set_charmm_variable</code> -- set a variable in CHARMM</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.lingo</span> <span class=\"k\">as</span> <span class=\"nn\">lingo</span>\n</code></pre>\n</div>\n\n<p>Evaluate one line of native CHARMM script in pyCHARMM</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lingo</span><span class=\"o\">.</span><span class=\"n\">charmm_script</span><span class=\"p\">(</span><span class=\"s1\">&#39;stream ./toppar_water_ions.str&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Get value of CHARMM substitution parameters</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pi</span><span class=\"o\">=</span><span class=\"n\">lingo</span><span class=\"o\">.</span><span class=\"n\">get_energy_value</span><span class=\"p\">(</span><span class=\"s1\">&#39;PI&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"go\">3.141592653589793</span>\n</code></pre>\n</div>\n\n<p>The following command is equivalent to CHARMM command <code>set M = 3</code></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lingo</span><span class=\"o\">.</span><span class=\"n\">set_charmm_variable</span><span class=\"p\">(</span><span class=\"s1\">&#39;M&#39;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">var</span><span class=\"o\">=</span><span class=\"n\">lingo</span><span class=\"o\">.</span><span class=\"n\">get_charmm_variable</span><span class=\"p\">(</span><span class=\"s1\">&#39;M&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.lingo.charmm_script", "modulename": "pycharmm.lingo", "qualname": "charmm_script", "kind": "function", "doc": "<p>Evaluate one or several lines of native CHARMM script</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>success</strong> (boolean):\nTrue indicates success</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">script</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.lingo.FoundValue", "modulename": "pycharmm.lingo", "qualname": "FoundValue", "kind": "class", "doc": "<p>Structure base class</p>\n", "bases": "_ctypes.Structure"}, {"fullname": "pycharmm.lingo.FoundValue.is_found", "modulename": "pycharmm.lingo", "qualname": "FoundValue.is_found", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.lingo.FoundValue.int_val", "modulename": "pycharmm.lingo", "qualname": "FoundValue.int_val", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.lingo.FoundValue.bool_val", "modulename": "pycharmm.lingo", "qualname": "FoundValue.bool_val", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.lingo.FoundValue.real_val", "modulename": "pycharmm.lingo", "qualname": "FoundValue.real_val", "kind": "variable", "doc": "<p>Structure/Union member</p>\n"}, {"fullname": "pycharmm.lingo.get_energy_value", "modulename": "pycharmm.lingo", "qualname": "get_energy_value", "kind": "function", "doc": "<p>Get the value of a substitution parameter in CHARMM</p>\n\n<p>See CHARMM documentation <a href=\"https://academiccharmm.org/documentation/version/c47b1/subst\">subst</a>\nfor more information</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong> (string):\nname of the CHARMM substitution parameter</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ret_val</strong> (None or numeric or boolean):\nif name found, then value in CHARMM, otherwise None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.lingo.get_charmm_variable", "modulename": "pycharmm.lingo", "qualname": "get_charmm_variable", "kind": "function", "doc": "<p>Get the value of a variable in CHARMM</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong> (string):\nname of the variable</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ret_val</strong> (string or None):\nif name found, then value in CHARMM, otherwise None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.lingo.set_charmm_variable", "modulename": "pycharmm.lingo", "qualname": "set_charmm_variable", "kind": "function", "doc": "<p>Set the value of variable in CHARMM</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong> (string):\nname of the variable</li>\n<li><strong>val</strong> (string, float or int):\nvalue of the variable</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ret_val</strong> (string or None):\nif name found, then value in CHARMM, otherwise None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">val</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.lingo.get_charmm_params", "modulename": "pycharmm.lingo", "qualname": "get_charmm_params", "kind": "function", "doc": "<p>Get the @ substitution parameter table from CHARMM</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.lingo.get_charmm_builtins", "modulename": "pycharmm.lingo", "qualname": "get_charmm_builtins", "kind": "function", "doc": "<p>Get the ? substitution parameters from CHARMM</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.minimize", "modulename": "pycharmm.minimize", "kind": "module", "doc": "<p>Functions to configure and run minimization </p>\n\n<p>Corresponds to CHARMM command <code>MINImize</code> <br />\nSee <a href=\"https://academiccharmm.org/documentation/version/c47b1/minimiz\">MINImize documentation</a>  </p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.minimize</span> <span class=\"k\">as</span> <span class=\"nn\">minimize</span> \n</code></pre>\n</div>\n\n<p>Following generation of PSF and building coordinates\nfor the system, minimization can be performed.</p>\n\n<p>For OMM minimizer</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">minimize</span><span class=\"o\">.</span><span class=\"n\">run_omm</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>For Steepest Descent minimizer</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">minimize</span><span class=\"o\">.</span><span class=\"n\">run_sd</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>For ABNR minimizer</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">minimize</span><span class=\"o\">.</span><span class=\"n\">run_abnr</span><span class=\"p\">(</span><span class=\"n\">nstep</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">tolenr</span><span class=\"o\">=</span><span class=\"mf\">1e-3</span><span class=\"p\">,</span> <span class=\"n\">tolgrd</span><span class=\"o\">=</span><span class=\"mf\">1e-3</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.minimize.run_abnr", "modulename": "pycharmm.minimize", "qualname": "run_abnr", "kind": "function", "doc": "<p>Run ABNR minimization</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong> (dict):\nsettings for ABNR minimization</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: true for success, false if there was an error</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.minimize.run_omm", "modulename": "pycharmm.minimize", "qualname": "run_omm", "kind": "function", "doc": "<p>Run OpenMM minimization</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nstep</strong> (int):\nnumber of cycles of minimization</li>\n<li><strong>tolgrd</strong> (float):\nif average gradient &lt;= tolgrd, exit</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nstep</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">tolgrd</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.minimize.run_sd", "modulename": "pycharmm.minimize", "qualname": "run_sd", "kind": "function", "doc": "<p>Run steepest descent minimization</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong> (dict):\nsettings for steepest descent minimization</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: true for success, false if there was an error</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.nbonds", "modulename": "pycharmm.nbonds", "kind": "module", "doc": "<p>Functions to configure nonbonded interactions\n   controlling how energy is calculated to compute forces for\n   minimization, dynamics or simply energy commands</p>\n\n<p>Corresponds to CHARMM command <code>NBONds</code></p>\n\n<p>See CHARMM documentation <a href=\"https://academiccharmm.org/documentation/version/c47b1/nbonds\">nbonds</a>\nfor more information</p>\n\n<h1 id=\"functions\">Functions</h1>\n\n<ul>\n<li><code>set_cutnb</code> -- change cutnb</li>\n<li><code>set_ctonnb</code> -- change ctonnb</li>\n<li><code>set_ctofnb</code> -- change ctofnb</li>\n<li><code>set_eps</code> -- change eps</li>\n<li><code>use_cdie</code> -- turn cdie on</li>\n<li><code>use_atom</code> -- turn atom on</li>\n<li><code>use_fswitch</code> -- turn fswitch on</li>\n<li><code>use_vatom</code> -- turn vatom on</li>\n<li><code>use_vfswitch</code> -- turn vfswitch on</li>\n<li><code>configure</code> -- set nonbonded params from a dict</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>Setup nonbonded interactions without PME</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.nbonds</span> <span class=\"k\">as</span> <span class=\"nn\">nbonds</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nbonds</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>  <span class=\"n\">cutnb</span><span class=\"o\">=</span><span class=\"mf\">18.0</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>  <span class=\"n\">ctonnb</span><span class=\"o\">=</span><span class=\"mf\">15.0</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>  <span class=\"n\">ctofnb</span><span class=\"o\">=</span><span class=\"mf\">13.0</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>  <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>  <span class=\"n\">cdie</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>  <span class=\"n\">atom</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>  <span class=\"n\">fswitch</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>  <span class=\"n\">vatom</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>  <span class=\"n\">vfswitch</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Another way to setup the nonbonded interactions</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nb_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;cutnb&#39;</span><span class=\"p\">:</span> <span class=\"mf\">18.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ctonnb&#39;</span><span class=\"p\">:</span> <span class=\"mf\">15.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ctofnb&#39;</span><span class=\"p\">:</span> <span class=\"mf\">13.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;eps&#39;</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cdie&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">&#39;atom&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fswitch&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">&#39;vatom&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">&#39;vfswitch&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">my_nbonds</span><span class=\"o\">=</span><span class=\"n\">pycharmm</span><span class=\"o\">.</span><span class=\"n\">NonBondedScript</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">nb_dict</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">my_nbonds</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.nbonds.set_inbfrq", "modulename": "pycharmm.nbonds", "qualname": "set_inbfrq", "kind": "function", "doc": "<p>Change inbfrq, the update frequency for the nonbonded list</p>\n\n<p>Update frequency for the nonbonded list. Used in the subroutine ENERGY()\nto decide whether to update the nonbond list. When set to :</p>\n\n<p>0 --> no updates of the list will be done.</p>\n\n<p>+n --> an update is done every time  MOD(ECALLS,n).EQ.0  . This is the old\n       frequency scheme, where an update is done every n steps of dynamics\n       or minimization.</p>\n\n<p>-1 --> heuristic testing is performed every time ENERGY() is called and\n       a list update is done if necessary. This is the default, because\n       it is both safer and more economical than frequency-updating.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_inbfrq</strong> (integer):\nthe new update frequency for the nonbonded list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_inbfrq</strong> (integer):\nthe old inbfrq</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_inbfrq</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.nbonds.set_imgfrq", "modulename": "pycharmm.nbonds", "qualname": "set_imgfrq", "kind": "function", "doc": "<p>Change imgfrq, the update frequency for the image list</p>\n\n<p>Update frequency for the image list. Used in the subroutine ENERGY()\nto decide whether to update the image list. When set to :</p>\n\n<p>0 --> no updates of the list will be done.</p>\n\n<p>+n --> an update is done every time  MOD(ECALLS,n).EQ.0  . This is the old\n       frequency scheme, where an update is done every n steps of dynamics\n       or minimization.</p>\n\n<p>-1 --> heuristic testing is performed every time ENERGY() is called and\n       a list update is done if necessary. This is the default, because\n       it is both safer and more economical than frequency-updating.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_imgfrq</strong> (integer):\nthe new update frequency for the image list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_imgfrq</strong> (integer):\nthe old imgfrq</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_imgfrq</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.nbonds.set_cutim", "modulename": "pycharmm.nbonds", "qualname": "set_cutim", "kind": "function", "doc": "<p>Change cutim, image update cutoff distance</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_cutim</strong> (float):\nthe new cutim</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_cutim</strong> (float):\nthe old cutim</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_cutim</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.nbonds.set_cutnb", "modulename": "pycharmm.nbonds", "qualname": "set_cutnb", "kind": "function", "doc": "<p>Change cutnb, the distance cutoff for interacting particle pairs</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_cutnb</strong> (float):\nthe new cutnb</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_cutnb</strong> (float):\nthe old cutnb</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_cutnb</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.nbonds.set_ctonnb", "modulename": "pycharmm.nbonds", "qualname": "set_ctonnb", "kind": "function", "doc": "<p>Change ctonnb, distance after which the switching function is active</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_ctonnb</strong> (float):\nthe new ctonnb</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_ctonnb</strong> (float):\nthe old ctonnb</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_ctonnb</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.nbonds.set_ctofnb", "modulename": "pycharmm.nbonds", "qualname": "set_ctofnb", "kind": "function", "doc": "<p>Change ctofnb, distance at which switching function stops being used</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_ctofnb</strong> (float):\nthe new ctofnb</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_ctofnb</strong> (float):\nthe old ctofnb</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_ctofnb</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.nbonds.set_eps", "modulename": "pycharmm.nbonds", "qualname": "set_eps", "kind": "function", "doc": "<p>Change eps, the dielectric constant for extened electrostatics routines</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_eps</strong> (float):\nthe new eps</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_eps</strong> (float):\nthe old eps</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_eps</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.nbonds.use_cdie", "modulename": "pycharmm.nbonds", "qualname": "use_cdie", "kind": "function", "doc": "<p>Use constant dielectric for radial energy functional form.\nEnergy is proportional to 1/R.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_cdie</strong> (float):\nthe old cdie</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.nbonds.use_atom", "modulename": "pycharmm.nbonds", "qualname": "use_atom", "kind": "function", "doc": "<p>Compute interactions on an atom-atom pair basis</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_atom</strong> (float):\nthe old atom</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.nbonds.use_vatom", "modulename": "pycharmm.nbonds", "qualname": "use_vatom", "kind": "function", "doc": "<p>Compute the van der waal energy term on an atom-atom pair basis</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_vatom</strong> (float):\nthe old vatom</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.nbonds.use_fswitch", "modulename": "pycharmm.nbonds", "qualname": "use_fswitch", "kind": "function", "doc": "<p>Use switching function on forces only from CTONNB to CTOFNB</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_fswitch</strong> (float):\nthe old fswitch</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.nbonds.use_vfswitch", "modulename": "pycharmm.nbonds", "qualname": "use_vfswitch", "kind": "function", "doc": "<p>Use switching function on VDW force from CTONNB to CTOFNB</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_vfswitch</strong> (float):\nthe old vfswitch</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.nbonds.configure", "modulename": "pycharmm.nbonds", "qualname": "configure", "kind": "function", "doc": "<p>Set nonbonded parameters from a dictionary of names and values</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong> (dict):\na dictionary of parameter names and their desired values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if everything went well</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.nbonds.get_ctonnb", "modulename": "pycharmm.nbonds", "qualname": "get_ctonnb", "kind": "function", "doc": "<p>Get ctonnb, distance after which the switching function is active</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_ctonnb</strong> (float):\nthe current ctonnb</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.nbonds.get_ctofnb", "modulename": "pycharmm.nbonds", "qualname": "get_ctofnb", "kind": "function", "doc": "<p>Get ctofnb, distance at which switching function stops being used</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_ctonnb</strong> (float):\nthe current ctofnb</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.nbonds.update_bnbnd", "modulename": "pycharmm.nbonds", "qualname": "update_bnbnd", "kind": "function", "doc": "<p>Update non-bonded exclusion list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.param", "modulename": "pycharmm.param", "kind": "module", "doc": "<p>Get data from CHARMM associated with parameter files</p>\n"}, {"fullname": "pycharmm.param.get_natc", "modulename": "pycharmm.param", "qualname": "get_natc", "kind": "function", "doc": "<p>Get the size of the atc array (see <code>get_atc()</code>)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>n</strong> (integer):\ncurrent total number of atc entries</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.param.get_atc", "modulename": "pycharmm.param", "qualname": "get_atc", "kind": "function", "doc": "<p>Export a copy of the atom type 'CHEM' codes/names</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[str]</strong>: CHEM name for atom type code</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.param.get_charge", "modulename": "pycharmm.param", "qualname": "get_charge", "kind": "function", "doc": "<p>Gets the charge of the atoms in the simulation</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: Charge of all the atoms.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.param.get_vdwr", "modulename": "pycharmm.param", "qualname": "get_vdwr", "kind": "function", "doc": "<p>Gets the vdW radius (vdwr) of the atoms in the simulation</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: vdW radius of all the atoms.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.param.get_epsilon", "modulename": "pycharmm.param", "qualname": "get_epsilon", "kind": "function", "doc": "<p>Gets the epsilon of the atoms in the simulation</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: vdW ebergy well depth (epsilon) for all the atoms.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf", "modulename": "pycharmm.psf", "kind": "module", "doc": "<p>Get data from CHARMM associated with 'psf' files</p>\n\n<h1 id=\"functions\">Functions</h1>\n\n<ul>\n<li><code>get_natom</code> -- get the current total number of atoms from CHARMM</li>\n<li><code>get_nres</code> -- get the current total number of residues from CHARMM</li>\n<li><code>get_nseg</code> -- get the current total number of segments from CHARMM</li>\n<li><code>get_ngrp</code> -- get the current total number of groups from CHARMM</li>\n<li><code>get_iac</code> -- export a copy of iac (param type codes)</li>\n<li><code>get_amass</code> -- export a copy of amass (atom masses)</li>\n<li><code>get_charges</code> -- export a copy of cg (atom charges)</li>\n<li><code>get_ibase</code> -- export a copy of ibase (last atom of each residue)</li>\n<li><code>get_atype</code> -- export a copy of atype (atom name array)</li>\n<li><code>get_res</code> -- export a copy of res (residue name array)</li>\n<li><code>get_resid</code> -- export a copy of resid (residue identifier array)</li>\n<li><code>get_segid</code> -- export a copy of segid (segment identifier array)</li>\n<li><code>get_nictot</code> -- export a copy of nictot (nres for each seg)</li>\n<li><code>get_igpbs</code> -- export a copy of igpbs (pointer for 1st atom in each group)</li>\n<li><code>get_igptyp</code> -- export a copy of gptyp (code type of each group)</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.psf</span> <span class=\"k\">as</span> <span class=\"nn\">psf</span>\n</code></pre>\n</div>\n\n<p>Get number of atoms in the system</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">psf</span><span class=\"o\">.</span><span class=\"n\">get_natom</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>Delete all TIP3 water molecules</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">water</span> <span class=\"o\">=</span> <span class=\"n\">pycharmm</span><span class=\"o\">.</span><span class=\"n\">SelectAtoms</span><span class=\"p\">(</span><span class=\"n\">res_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;TIP3&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">psf</span><span class=\"o\">.</span><span class=\"n\">delete_atoms</span><span class=\"p\">(</span><span class=\"n\">water</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.psf.get_natom", "modulename": "pycharmm.psf", "qualname": "get_natom", "kind": "function", "doc": "<p>Get the current total number of atoms from CHARMM</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>n</strong> (integer):\ncurrent total number of atoms</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_nres", "modulename": "pycharmm.psf", "qualname": "get_nres", "kind": "function", "doc": "<p>Get the current total number of residues from CHARMM</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>n</strong> (integer):\ncurrent total number of residues</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_nseg", "modulename": "pycharmm.psf", "qualname": "get_nseg", "kind": "function", "doc": "<p>Get the current total number of segments from CHARMM</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>n</strong> (integer):\ncurrent total number of segments</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_ngrp", "modulename": "pycharmm.psf", "qualname": "get_ngrp", "kind": "function", "doc": "<p>Get the current total number of groups from CHARMM</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>n</strong> (integer):\ncurrent total number of groups</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_iac", "modulename": "pycharmm.psf", "qualname": "get_iac", "kind": "function", "doc": "<p>Get an array of the param type code for each atom</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>iac</strong> (integer list):\nparam type code for each atom</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_amass", "modulename": "pycharmm.psf", "qualname": "get_amass", "kind": "function", "doc": "<p>Get an array of the mass of each atom</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>amass</strong> (double list):\nmass of each atom</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_charges", "modulename": "pycharmm.psf", "qualname": "get_charges", "kind": "function", "doc": "<p>Get an array of each atoms charge</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>charges</strong> (double list):\ncharge of each atom</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_ibase", "modulename": "pycharmm.psf", "qualname": "get_ibase", "kind": "function", "doc": "<p>Get array of last atom index of each residue</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ibase</strong> (integer list):\nlast atom index of each residue</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_atype", "modulename": "pycharmm.psf", "qualname": "get_atype", "kind": "function", "doc": "<p>Get list of IUPAC atom names</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>atype</strong> (string list):\nIUPAC name for each atom</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_res", "modulename": "pycharmm.psf", "qualname": "get_res", "kind": "function", "doc": "<p>Get list of residue names</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>res</strong> (string list):\nname for each residue</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_res_idx", "modulename": "pycharmm.psf", "qualname": "get_res_idx", "kind": "function", "doc": "<p>Get the index of the first residue with name res_name</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>res_name</strong> (string):\nname to look for in res list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><p><strong>i</strong> (integer):\nif res_name found, index of residue in res</p>\n\n<p>if res_name not found, 0</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">res_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_resid", "modulename": "pycharmm.psf", "qualname": "get_resid", "kind": "function", "doc": "<p>Get list of residue IDs</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>resid</strong> (string list):\nidentifier for each residue</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_segid", "modulename": "pycharmm.psf", "qualname": "get_segid", "kind": "function", "doc": "<p>Get list of segment IDs</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>segid</strong> (string list):\nidentifier for each segment</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_nictot", "modulename": "pycharmm.psf", "qualname": "get_nictot", "kind": "function", "doc": "<p>Get number of residues for each segment</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>nictot</strong> (integer list):\nnumber of residues for each segment</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_igpbs", "modulename": "pycharmm.psf", "qualname": "get_igpbs", "kind": "function", "doc": "<p>Get first atom in each group</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>igpbs</strong> (integer list):\nfirst atom in each group</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_igptyp", "modulename": "pycharmm.psf", "qualname": "get_igptyp", "kind": "function", "doc": "<p>Get code type of each group</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>igptyp</strong> (integer list):\ncode type of each group</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.delete_atoms", "modulename": "pycharmm.psf", "qualname": "delete_atoms", "kind": "function", "doc": "<p>Delete a selection of atoms from the psf</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>selection</strong> (pycharmm.SelectAtoms):\nselection[i] == True &lt;=&gt; atom i is selected</li>\n<li><strong>psort</strong> (boolean):\nTrue &lt;=&gt; sort psf after deleted atoms are mapped out</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (bool):\ntrue if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">psort</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.delete_bonds", "modulename": "pycharmm.psf", "qualname": "delete_bonds", "kind": "function", "doc": "<p>Delete bonds between two selections from the psf</p>\n\n<p>If atom i and atom j have a bond, and\niselect(i) is 1 and jselect(j) is 1,\nthen the bond is deleted</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>iselect</strong> (pycharmm.SelectAtoms):</p></li>\n<li><p><strong>jselect</strong> (pycharmm.SelectAtoms):</p></li>\n<li><p><strong>psort</strong> (boolean):\nTrue &lt;=&gt; sort psf after deleted atoms are mapped out</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (bool):\ntrue if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iselect</span>, </span><span class=\"param\"><span class=\"n\">jselect</span>, </span><span class=\"param\"><span class=\"n\">psort</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.delete_angles", "modulename": "pycharmm.psf", "qualname": "delete_angles", "kind": "function", "doc": "<p>Delete angles between two selections from the psf</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>iselect</strong> (pycharmm.SelectAtoms):</p></li>\n<li><p><strong>jselect</strong> (pycharmm.SelectAtoms):</p></li>\n<li><p><strong>psort</strong> (boolean):\nTrue &lt;=&gt; sort psf after deleted atoms are mapped out</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (bool):\ntrue if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iselect</span>, </span><span class=\"param\"><span class=\"n\">jselect</span>, </span><span class=\"param\"><span class=\"n\">psort</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.delete_dihedrals", "modulename": "pycharmm.psf", "qualname": "delete_dihedrals", "kind": "function", "doc": "<p>Delete dihedrals between two selections from the psf</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>iselect</strong> (pycharmm.SelectAtoms):</p></li>\n<li><p><strong>jselect</strong> (pycharmm.SelectAtoms):</p></li>\n<li><p><strong>psort</strong> (boolean):\nTrue &lt;=&gt; sort psf after deleted atoms are mapped out</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (bool):\ntrue if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iselect</span>, </span><span class=\"param\"><span class=\"n\">jselect</span>, </span><span class=\"param\"><span class=\"n\">psort</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.delete_impropers", "modulename": "pycharmm.psf", "qualname": "delete_impropers", "kind": "function", "doc": "<p>Delete impropers between two selections from the psf</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>iselect</strong> (pycharmm.SelectAtoms):</p></li>\n<li><p><strong>jselect</strong> (pycharmm.SelectAtoms):</p></li>\n<li><p><strong>psort</strong> (boolean):\nTrue &lt;=&gt; sort psf after deleted atoms are mapped out</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (bool):\ntrue if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iselect</span>, </span><span class=\"param\"><span class=\"n\">jselect</span>, </span><span class=\"param\"><span class=\"n\">psort</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.delete_cmaps", "modulename": "pycharmm.psf", "qualname": "delete_cmaps", "kind": "function", "doc": "<p>Delete cmaps between two selections from the psf</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>iselect</strong> (pycharmm.SelectAtoms):</p></li>\n<li><p><strong>jselect</strong> (pycharmm.SelectAtoms):</p></li>\n<li><p><strong>psort</strong> (boolean):\nTrue &lt;=&gt; sort psf after deleted atoms are mapped out</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (bool):\ntrue if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iselect</span>, </span><span class=\"param\"><span class=\"n\">jselect</span>, </span><span class=\"param\"><span class=\"n\">psort</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.delete_connectivity", "modulename": "pycharmm.psf", "qualname": "delete_connectivity", "kind": "function", "doc": "<p>Delete all connectivity between two selections from the psf</p>\n\n<p>includes bonds, angles, dihedrals, impropers, and cmaps</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>iselect</strong> (pycharmm.SelectAtoms):</p></li>\n<li><p><strong>jselect</strong> (pycharmm.SelectAtoms):</p></li>\n<li><p><strong>psort</strong> (boolean):\nTrue &lt;=&gt; sort psf after deleted atoms are mapped out</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (bool):\ntrue if successful</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iselect</span>, </span><span class=\"param\"><span class=\"n\">jselect</span>, </span><span class=\"param\"><span class=\"n\">psort</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_nnb", "modulename": "pycharmm.psf", "qualname": "get_nnb", "kind": "function", "doc": "<p>Get the current total number of non-bonded exclusions</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>n</strong> (integer):\ncurrent number of non-bonded exclusions</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.set_charge", "modulename": "pycharmm.psf", "qualname": "set_charge", "kind": "function", "doc": "<p>Set a new atom charge array </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_inblo</strong> (int list(natom)):\nINBLO list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_charges</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.get_iblo_inb", "modulename": "pycharmm.psf", "qualname": "get_iblo_inb", "kind": "function", "doc": "<p>Get non-bonded exclusion list</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>inb</strong> (int list):\nnon-bonded exclusion list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.psf.set_iblo_inb", "modulename": "pycharmm.psf", "qualname": "set_iblo_inb", "kind": "function", "doc": "<p>Set non-bonded exclusion list</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_inblo</strong> (int list(natom)):\nINBLO list</li>\n<li><strong>new_inb</strong> (int list(nnb)):\nINB list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>nnb</strong> (int):\nnumber of atom pairs in non-bonded exclusion list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_inblo</span>, </span><span class=\"param\"><span class=\"n\">new_inb</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.read", "modulename": "pycharmm.read", "kind": "module", "doc": "<p>Get data into CHARMM from several file types.  </p>\n\n<p>Corresponds to CHARMM command <code>READ</code> in the IO module <br />\nSee <a href=\"https://academiccharmm.org/documentation/version/c47b1/io#Read\">READ documentation</a>  </p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.read</span>\n</code></pre>\n</div>\n\n<p>Read a RTF file.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">read</span><span class=\"o\">.</span><span class=\"n\">rtf</span><span class=\"p\">(</span><span class=\"s1\">&#39;data/top_all36_prot.rtf&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Read a paramter file</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">read</span><span class=\"o\">.</span><span class=\"n\">prm</span><span class=\"p\">(</span><span class=\"s1\">&#39;data/par_all36_prot.prm&#39;</span><span class=\"p\">,</span> <span class=\"n\">flex</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Read a sequence from a PDB file</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">read</span><span class=\"o\">.</span><span class=\"n\">sequence_pdb</span><span class=\"p\">(</span><span class=\"s1\">&#39;...&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.read.rtf", "modulename": "pycharmm.read", "qualname": "rtf", "kind": "function", "doc": "<p>Read a topology file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>filename</strong> (str):</p></li>\n<li><p><strong>**kwargs</strong>: additional keyword arguments</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.read.prm", "modulename": "pycharmm.read", "qualname": "prm", "kind": "function", "doc": "<p>Read a parameter file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.read.psf_card", "modulename": "pycharmm.read", "qualname": "psf_card", "kind": "function", "doc": "<p>Read a psf card file from disk given a path.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.read.pdb", "modulename": "pycharmm.read", "qualname": "pdb", "kind": "function", "doc": "<p>Read a PDB file from disk given a path</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.read.stream", "modulename": "pycharmm.read", "qualname": "stream", "kind": "function", "doc": "<p>Read a stream file from disk given a path</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.read.sequence_pdb", "modulename": "pycharmm.read", "qualname": "sequence_pdb", "kind": "function", "doc": "<p>Read a PDB file from disk given a path</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True indicates successful reading</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.read.sequence_string", "modulename": "pycharmm.read", "qualname": "sequence_string", "kind": "function", "doc": "<p>Create a sequence</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>seq</strong> (str):\na string of space delimited names (see example below)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: 1 indicates success, any other value indicates failure</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.read</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">read</span><span class=\"o\">.</span><span class=\"n\">sequence_pdb</span><span class=\"p\">(</span><span class=\"s1\">&#39;AMN CBX&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seq</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.read.coor_card", "modulename": "pycharmm.read", "qualname": "coor_card", "kind": "function", "doc": "<p>Read a CHARMM format coordinate file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar", "modulename": "pycharmm.scalar", "kind": "module", "doc": "<p>Functions to manipulate scalar atom properties</p>\n\n<p>Corresponds to CHARMM command <code>SCALar</code></p>\n\n<p>See CHARMM documentation <a href=\"https://academiccharmm.org/documentation/version/c47b1/scalar\">scalar</a>\nfor more information</p>\n\n<h1 id=\"functions\">Functions</h1>\n\n<ul>\n<li><code>get_fbetas</code> -- get friction coefficients for the atoms</li>\n<li><code>set_fbetas</code> -- set friction coefficients for the selected atoms</li>\n<li><code>get_econt</code> -- get the energy partition array</li>\n<li><code>set_econt</code> -- for selected atoms, update the energy partition array</li>\n<li><code>get_epcont</code> -- get the free energy difference atom partition</li>\n<li><code>set_epcont</code> -- for selected atoms, update the free energy difference atom partition</li>\n<li><code>get_constraints</code> -- get the harmonic restraint constants</li>\n<li><code>set_constraints</code> -- for selected atoms, update the harmonic restraint constants</li>\n<li><code>get_move</code> -- get the flags indicating which atoms move</li>\n<li><code>set_move</code> -- for selected atoms, update the flags indicating which atoms move</li>\n<li><code>get_ignore</code> -- get the ASP flags indicating which atoms are ignored</li>\n<li><code>set_ignore</code> -- for selected atoms, update the ASP flags indicating which atoms are ignored</li>\n<li><code>get_aspv</code> -- get atomic solvation parameter (ASP) value</li>\n<li><code>set_aspv</code> -- for selected atoms, update atomic solvation parameter (ASP) value</li>\n<li><code>get_vdw_surf</code> -- get vdw radius for ASP solvation energy, includes probe radius</li>\n<li><code>set_vdw_surf</code> -- for select atoms, update vdw radius for ASP solvation ener, includes probe radius</li>\n<li><code>get_rscale</code> -- get radius scale factor for nonbonded (vdw)</li>\n<li><code>set_rscale</code> -- for select atoms, update radius scale factor for nonbonded (vdw)</li>\n<li><code>get_wcad</code> -- get Weeks, Chandler, Anderson decomp of Lennard-Jones Potential</li>\n<li><code>set_wcad</code> -- for select atoms, update Weeks, Chandler, Anderson LJ Potential decomp</li>\n<li><code>get_alpha</code> -- get atom polarizability</li>\n<li><code>get_effect</code> -- get effective number of electrons</li>\n<li><code>get_radius</code> -- get van der Waals radii</li>\n<li><code>get_fqprin</code> -- get FQ Slater orbital principal quantum number</li>\n<li><code>get_fqzeta</code> -- get FQ Slater orbital exponent</li>\n<li><code>get_fqchi</code> -- get FQ electronegativity parameter</li>\n<li><code>get_fqmass</code> -- get FQ charge mass</li>\n<li><code>get_fqjz</code> -- get FQ self-interaction</li>\n<li><code>get_fqcforce</code> -- get FQ charge force</li>\n<li><code>set_fqcforce</code> -- for select atoms, update FQ charge force</li>\n<li><code>get_fqold</code> -- get FQ charges from last timestep</li>\n<li><code>set_fqold</code> -- for select atoms, update FQ charges from last timestep</li>\n<li><code>get_varc</code> -- get variable cutoffs of LJ interaction depending on atom types</li>\n<li><code>set_varc</code> -- for select atoms, set variable cutoffs of LJ interaction</li>\n<li><code>get_sgwt</code> -- get self-guiding weights for SGLD simulation</li>\n<li><code>set_sgwt</code> -- for select atoms, set self-guiding weights for SGLD simulation</li>\n<li><code>get_sggamma</code> -- get apparent friction constants for SGMD/SGLD simulation</li>\n<li><code>set_sggamma</code> -- for select atoms, set apparent friction constants for SGMD/SGLD</li>\n<li><code>get</code> -- get scalar atom properties</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>Set fbeta of all atoms to 1.0 </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.psf</span> <span class=\"k\">as</span> <span class=\"nn\">psf</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.scalar</span> <span class=\"k\">as</span> <span class=\"nn\">scalar</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">psf</span><span class=\"o\">.</span><span class=\"n\">get_natom</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scalar</span><span class=\"o\">.</span><span class=\"n\">set_fbetas</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.scalar.get_charges", "modulename": "pycharmm.scalar", "qualname": "get_charges", "kind": "function", "doc": "<p>Get charges for the atoms</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>charges</strong> (list[float]):\ncharges for the atoms</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.set_charges", "modulename": "pycharmm.scalar", "qualname": "set_charges", "kind": "function", "doc": "<p>Set charges for the selected atoms</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>charges</strong> (list[float]):\ncharges for each atom</li>\n<li><p><strong>selection</strong> (pycharmm.SelectAtoms):\nset charges for only these selected atoms</p>\n\n<p>default None results in all atoms selected</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: status code returned by lib.charmm.scalar_set_charges routine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">charges</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_fbetas", "modulename": "pycharmm.scalar", "qualname": "get_fbetas", "kind": "function", "doc": "<p>Get friction coefficients for the atoms</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>fbetas</strong> (list[float]):\nfriction coefficients for the atoms</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.set_fbetas", "modulename": "pycharmm.scalar", "qualname": "set_fbetas", "kind": "function", "doc": "<p>Set friction coefficients for the selected atoms</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fbetas</strong> (list[float]):\nfriction coefficients for each atom</li>\n<li><p><strong>selection</strong> (pycharmm.SelectAtoms):\nset friction coefficients for only these selected atoms</p>\n\n<p>default None results in all atoms selected</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: status code returned by lib.charmm.scalar_set_fbetas routine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fbetas</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_econt", "modulename": "pycharmm.scalar", "qualname": "get_econt", "kind": "function", "doc": "<p>Get the energy partition array</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: the energy partition array</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.set_econt", "modulename": "pycharmm.scalar", "qualname": "set_econt", "kind": "function", "doc": "<p>For selected atoms, update the energy partition array</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_vals</strong> (list[float]):\nnew values to set</li>\n<li><p><strong>selection</strong> (pycharmm.SelectAtoms):\nset new values for only these selected atoms</p>\n\n<p>default None results in all atoms selected</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: status code returned by lib.charmm.scalar_set_econt routine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_vals</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_epcont", "modulename": "pycharmm.scalar", "qualname": "get_epcont", "kind": "function", "doc": "<p>Get the free energy difference atom partition</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.set_epcont", "modulename": "pycharmm.scalar", "qualname": "set_epcont", "kind": "function", "doc": "<p>For selected atoms, update the free energy difference atom partition</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_vals</strong> (list[float]):\nnew values to set</li>\n<li><p><strong>selection</strong> (pycharmm.SelectAtoms):\nset new values for only these selected atoms</p>\n\n<p>default None results in all atoms selected</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: status code returned by lib.charmm.scalar_set_epcont API routine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_vals</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_constraints", "modulename": "pycharmm.scalar", "qualname": "get_constraints", "kind": "function", "doc": "<p>Get the harmonic restraint constants</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.set_constraints", "modulename": "pycharmm.scalar", "qualname": "set_constraints", "kind": "function", "doc": "<p>For selected atoms, update the harmonic restraint constants</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_vals</strong> (list[float]):\nnew values to set</li>\n<li><p><strong>selection</strong> (pycharmm.SelectAtoms):\nset new values for only these selected atoms</p>\n\n<p>default None results in all atoms selected</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: status code returned by lib.charmm.scalar_set_constraints API routine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_vals</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_move", "modulename": "pycharmm.scalar", "qualname": "get_move", "kind": "function", "doc": "<p>Get the flags indicating which atoms move</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[int]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.set_move", "modulename": "pycharmm.scalar", "qualname": "set_move", "kind": "function", "doc": "<p>For selected atoms, update the flags indicating which atoms move</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_vals</strong> (list[int]):\nnew values to set</li>\n<li><p><strong>selection</strong> (pycharmm.SelectAtoms):\nset new values for only these selected atoms</p>\n\n<p>default None results in all atoms selected</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>status</strong> (list[int]):\nstatus code returned by lib.charmm.scalar_set_move API routine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_vals</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_ignore", "modulename": "pycharmm.scalar", "qualname": "get_ignore", "kind": "function", "doc": "<p>Get the ASP flags indicating which atoms are ignored</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[int]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.set_ignore", "modulename": "pycharmm.scalar", "qualname": "set_ignore", "kind": "function", "doc": "<p>For selected atoms, update the ASP flags indicating which atoms are ignored</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_vals</strong> (list[int]):\nnew values to set</li>\n<li><p><strong>selection</strong> (pycharmm.SelectAtoms):\nset new values for only these selected atoms</p>\n\n<p>default None results in all atoms selected</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: status code returned by lib.charmm.scalar_set_ignore API routine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_vals</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_aspv", "modulename": "pycharmm.scalar", "qualname": "get_aspv", "kind": "function", "doc": "<p>Get ASP parameter value</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.set_aspv", "modulename": "pycharmm.scalar", "qualname": "set_aspv", "kind": "function", "doc": "<p>For selected atoms, update ASP parameter values </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_vals</strong> (list[float]):\nnew values to set</li>\n<li><p><strong>selection</strong> (pycharmm.SelectAtoms):\nset new values for only these selected atoms</p>\n\n<p>default None results in all atoms selected</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: status code returned by lib.charmm.scalar_set_aspv API routine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_vals</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_vdw_surf", "modulename": "pycharmm.scalar", "qualname": "get_vdw_surf", "kind": "function", "doc": "<p>Get vdw radius for ASP solvation energy, includes probe radius</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.set_vdw_surf", "modulename": "pycharmm.scalar", "qualname": "set_vdw_surf", "kind": "function", "doc": "<p>For select atoms, update vdw radius for ASP solvation energy, includes probe radius</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_vals</strong> (list[float]):\nnew values to set</li>\n<li><p><strong>selection</strong> (pycharmm.SelectAtoms):\nset new values for only these selected atoms</p>\n\n<p>default None results in all atoms selected</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: status code returned by lib.charmm.scalar_set_vdw_surf routine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_vals</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_rscale", "modulename": "pycharmm.scalar", "qualname": "get_rscale", "kind": "function", "doc": "<p>Get radius scale factor for nonbonded (vdw)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.set_rscale", "modulename": "pycharmm.scalar", "qualname": "set_rscale", "kind": "function", "doc": "<p>For select atoms, update radius scale factor for nonbonded (vdw)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_vals</strong> (list[float]):\nnew values to set</li>\n<li><p><strong>selection</strong> (pycharmm.SelectAtoms):\nset new values for only these selected atoms</p>\n\n<p>default None results in all atoms selected</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: status code returned by lib.charmm.scalar_set_rscale API routine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_vals</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_wcad", "modulename": "pycharmm.scalar", "qualname": "get_wcad", "kind": "function", "doc": "<p>Get Weeks, Chandler, Anderson decomp of Lennard-Jones Potential</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.set_wcad", "modulename": "pycharmm.scalar", "qualname": "set_wcad", "kind": "function", "doc": "<p>For select atoms, update Weeks, Chandler, Anderson LJ Potential decomp</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_vals</strong> (list[float]):\nnew values to set</li>\n<li><p><strong>selection</strong> (pycharmm.SelectAtoms):\nset new values for only these selected atoms</p>\n\n<p>default None results in all atoms selected</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: status code returned by charmm's scalar set api routine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_vals</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_alpha", "modulename": "pycharmm.scalar", "qualname": "get_alpha", "kind": "function", "doc": "<p>Get atom polarizability</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_effect", "modulename": "pycharmm.scalar", "qualname": "get_effect", "kind": "function", "doc": "<p>Get effective number of electrons</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_radius", "modulename": "pycharmm.scalar", "qualname": "get_radius", "kind": "function", "doc": "<p>Get van der Waals radii</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_fqprin", "modulename": "pycharmm.scalar", "qualname": "get_fqprin", "kind": "function", "doc": "<p>Get FQ Slater orbital principal quantum number</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_fqzeta", "modulename": "pycharmm.scalar", "qualname": "get_fqzeta", "kind": "function", "doc": "<p>Get FQ Slater orbital exponent</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_fqchi", "modulename": "pycharmm.scalar", "qualname": "get_fqchi", "kind": "function", "doc": "<p>Get FQ electronegativity parameter</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_fqmass", "modulename": "pycharmm.scalar", "qualname": "get_fqmass", "kind": "function", "doc": "<p>Get FQ charge mass</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_fqjz", "modulename": "pycharmm.scalar", "qualname": "get_fqjz", "kind": "function", "doc": "<p>Get FQ self-interaction</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_fqcforce", "modulename": "pycharmm.scalar", "qualname": "get_fqcforce", "kind": "function", "doc": "<p>Get FQ charge force</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.set_fqcforce", "modulename": "pycharmm.scalar", "qualname": "set_fqcforce", "kind": "function", "doc": "<p>For select atoms, update FQ charge force</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_vals</strong> (list[float]):\nnew values to set</li>\n<li><p><strong>selection</strong> (pycharmm.SelectAtoms):\nset new values for only these selected atoms</p>\n\n<p>default None results in all atoms selected</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: status code returned by charmm's scalar set api routine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_vals</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_fqold", "modulename": "pycharmm.scalar", "qualname": "get_fqold", "kind": "function", "doc": "<p>Get FQ charges from last timestep</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.set_fqold", "modulename": "pycharmm.scalar", "qualname": "set_fqold", "kind": "function", "doc": "<p>For select atoms, update FQ charges from last timestep</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_vals</strong> (list[float]):\nnew values to set</li>\n<li><p><strong>selection</strong> (pycharmm.SelectAtoms):\nset new values for only these selected atoms</p>\n\n<p>default None results in all atoms selected</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: status code returned by charmm's scalar set api routine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_vals</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_varc", "modulename": "pycharmm.scalar", "qualname": "get_varc", "kind": "function", "doc": "<p>Get variable cutoffs of LJ interaction depending on atom types</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.set_varc", "modulename": "pycharmm.scalar", "qualname": "set_varc", "kind": "function", "doc": "<p>For select atoms, set variable cutoffs of LJ interaction</p>\n\n<p>depends on atom type</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_vals</strong> (list[float]):\nnew values to set</li>\n<li><p><strong>selection</strong> (pycharmm.SelectAtoms):\nset new values for only these selected atoms</p>\n\n<p>default None results in all atoms selected</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: status code returned by charmm's scalar set api routine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_vals</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_sgwt", "modulename": "pycharmm.scalar", "qualname": "get_sgwt", "kind": "function", "doc": "<p>Get self-guiding weights for SGLD simulation</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.set_sgwt", "modulename": "pycharmm.scalar", "qualname": "set_sgwt", "kind": "function", "doc": "<p>For select atoms, set self-guiding weights for SGLD simulation</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_vals</strong> (list[float]):\nnew values to set</li>\n<li><p><strong>selection</strong> (pycharmm.SelectAtoms):\nset new values for only these selected atoms</p>\n\n<p>default None results in all atoms selected</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: status code returned by charmm's scalar set api routine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_vals</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get_sggamma", "modulename": "pycharmm.scalar", "qualname": "get_sggamma", "kind": "function", "doc": "<p>Get apparent friction constants for SGMD/SGLD simulation</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[float]</strong>: array of scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.set_sggamma", "modulename": "pycharmm.scalar", "qualname": "set_sggamma", "kind": "function", "doc": "<p>For select atoms, set apparent friction constants for SGMD/SGLD</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_vals</strong> (list[float]):\nnew values to set</li>\n<li><p><strong>selection</strong> (pycharmm.SelectAtoms):\nset new values for only these selected atoms</p>\n\n<p>default None results in all atoms selected</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: status code returned by charmm's scalar set api routine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_vals</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.scalar.get", "modulename": "pycharmm.scalar", "qualname": "get", "kind": "function", "doc": "<p>Get scalar atom properties in a dictionary</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fbeta</strong> (bool):\ninclude friction coeff for each atom?</li>\n<li><strong>econt</strong> (bool):\ninclude energy partion array?</li>\n<li><strong>epcont</strong> (bool):\ninclude energy difference atom partion array?</li>\n<li><strong>constraints</strong> (bool):\ninclude harmonic contraint constants?</li>\n<li><strong>move</strong> (bool):\ninclude flags indicating which atoms move?</li>\n<li><strong>ignore</strong> (bool):\ninclude flags indicating which atoms are ignored?</li>\n<li><strong>aspv</strong> (bool):\ninclude atomic solvation parameters?</li>\n<li><strong>vdw_surf</strong> (bool):\ninclude vdw radius for solvent energy?</li>\n<li><strong>rscale</strong> (bool):\ninclude radius scale factor for nonbonded (vdw)?</li>\n<li><strong>wcad</strong> (bool):\ninclude Weeks, Chandler, Anderson LJ Potential decomp?</li>\n<li><strong>alpha</strong> (bool):\ninclude atom polarizability?</li>\n<li><strong>effect</strong> (bool):\ninclude effective number of electrons?</li>\n<li><strong>radius</strong> (bool):\ninclude van der Waals radii?</li>\n<li><strong>fqprin</strong> (bool):\ninclude FQ Slater orbital principal quantum number?</li>\n<li><strong>fqzeta</strong> (bool):\ninclude FQ Slater orbital exponent?</li>\n<li><strong>fqchi</strong> (bool):\ninclude FQ electronegativity parameter?</li>\n<li><strong>fqmass</strong> (bool):\ninclude FQ charge mass?</li>\n<li><strong>fqjz</strong> (bool):\ninclude FQ self-interaction?</li>\n<li><strong>fqcforce</strong> (bool):\ninclude FQ charge force?</li>\n<li><strong>fqold</strong> (bool):\ninclude FQ charges from last timestep?</li>\n<li><strong>varc</strong> (bool):\ninclude variable cutoffs of LJ interaction?</li>\n<li><strong>sgwt</strong> (bool):\ninclude self-guiding weights for SGLD simulation?</li>\n<li><strong>sggamma</strong> (bool):\ninclude apparent friction constants for SGMD/SGLD?</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: a dictionary whose keys are True keyword arguments, \nand values are list of corresponding scalar values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fbeta</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">econt</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">epcont</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">constraints</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">move</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ignore</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">aspv</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">vdw_surf</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">rscale</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">wcad</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">effect</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fqprin</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fqzeta</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fqchi</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fqmass</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fqjz</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fqcforce</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fqold</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">varc</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sgwt</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sggamma</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.script", "modulename": "pycharmm.script", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycharmm.script.CommandScript", "modulename": "pycharmm.script", "qualname": "CommandScript", "kind": "class", "doc": "<p>A class used to construct a command in CHARMM scripting language and then execute it.</p>\n"}, {"fullname": "pycharmm.script.CommandScript.__init__", "modulename": "pycharmm.script", "qualname": "CommandScript.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command</strong> (str):\nCHARMM scripting language command that will be run using pyCHARMM.</li>\n<li><p><strong>selection</strong> (pycharmm.selectAtoms):</p></li>\n<li><p><strong>**kwargs</strong> (dict, optional):\nAdditional options relevant to the <code>command</code> being run.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">command</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pycharmm.script.CommandScript.add_options", "modulename": "pycharmm.script", "qualname": "CommandScript.add_options", "kind": "function", "doc": "<p>Add additional options relevant to the command being run.</p>\n\n<p>If value is of type <code>float</code>, <code>int</code> or <code>str</code> a \"key value\" \nline is added to the command's script. \nIf it is of type <code>bool</code> and is True\nthen a \"key\" line is added.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.script.CommandScript.create_script_string", "modulename": "pycharmm.script", "qualname": "CommandScript.create_script_string", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.script.CommandScript.run", "modulename": "pycharmm.script", "qualname": "CommandScript.run", "kind": "function", "doc": "<p>Execute the command.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">append</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.script.NonBondedScript", "modulename": "pycharmm.script", "qualname": "NonBondedScript", "kind": "class", "doc": "<p>A child of the <code>CommandScript</code> class for running CHARMM NBOND command.</p>\n\n<p>See <a href=\"https://academiccharmm.org/documentation/latest/nbonds\">https://academiccharmm.org/documentation/latest/nbonds</a> for more details.</p>\n", "bases": "CommandScript"}, {"fullname": "pycharmm.script.NonBondedScript.__init__", "modulename": "pycharmm.script", "qualname": "NonBondedScript.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command</strong> (str):\nCHARMM scripting language command that will be run using pyCHARMM.</li>\n<li><p><strong>selection</strong> (pycharmm.selectAtoms):</p></li>\n<li><p><strong>**kwargs</strong> (dict, optional):\nAdditional options relevant to the <code>command</code> being run.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pycharmm.script.UpdateNonBondedScript", "modulename": "pycharmm.script", "qualname": "UpdateNonBondedScript", "kind": "class", "doc": "<p>A child of the <code>CommandScript</code> class for running CHARMM UPDATE command.</p>\n\n<p>See <a href=\"https://academiccharmm.org/documentation/latest/nbonds\">https://academiccharmm.org/documentation/latest/nbonds</a> for more details.</p>\n", "bases": "CommandScript"}, {"fullname": "pycharmm.script.UpdateNonBondedScript.__init__", "modulename": "pycharmm.script", "qualname": "UpdateNonBondedScript.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command</strong> (str):\nCHARMM scripting language command that will be run using pyCHARMM.</li>\n<li><p><strong>selection</strong> (pycharmm.selectAtoms):</p></li>\n<li><p><strong>**kwargs</strong> (dict, optional):\nAdditional options relevant to the <code>command</code> being run.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pycharmm.script.PatchScript", "modulename": "pycharmm.script", "qualname": "PatchScript", "kind": "class", "doc": "<p>A child of the <code>CommandScript</code> class for running CHARMM PATCH command.\nSee <a href=\"https://academiccharmm.org/documentation/latest/struct#Patch\">https://academiccharmm.org/documentation/latest/struct#Patch</a> for more details.</p>\n", "bases": "CommandScript"}, {"fullname": "pycharmm.script.PatchScript.__init__", "modulename": "pycharmm.script", "qualname": "PatchScript.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command</strong> (str):\nCHARMM scripting language command that will be run using pyCHARMM.</li>\n<li><p><strong>selection</strong> (pycharmm.selectAtoms):</p></li>\n<li><p><strong>**kwargs</strong> (dict, optional):\nAdditional options relevant to the <code>command</code> being run.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pycharmm.script.WriteScript", "modulename": "pycharmm.script", "qualname": "WriteScript", "kind": "class", "doc": "<p>A child of the <code>CommandScript</code> class for running CHARMM WRITE command.</p>\n\n<p>In the constructure a multiline <code>title</code> can be provided. The title can later be appended when the <code>runn()</code> function is called using its <code>append</code> argument.</p>\n", "bases": "CommandScript"}, {"fullname": "pycharmm.script.WriteScript.__init__", "modulename": "pycharmm.script", "qualname": "WriteScript.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command</strong> (str):\nCHARMM scripting language command that will be run using pyCHARMM.</li>\n<li><p><strong>selection</strong> (pycharmm.selectAtoms):</p></li>\n<li><p><strong>**kwargs</strong> (dict, optional):\nAdditional options relevant to the <code>command</code> being run.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pycharmm.script.WriteScript.run", "modulename": "pycharmm.script", "qualname": "WriteScript.run", "kind": "function", "doc": "<p>Execute the command.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">append</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.script.script_factory", "modulename": "pycharmm.script", "qualname": "script_factory", "kind": "function", "doc": "<p>Create a CommandScript object for any CHARMM command.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command</strong> (str):\nthe CHARMM command to be run (only the name)</li>\n<li><strong>required_args</strong> (list[str]):\na list of argument names the command requires</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>UserScript</strong> (CommandScript):\nA class with a run method to run the CHARMM command specified</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm</span>\n</code></pre>\n</div>\n\n<p>To run the GETEnegy command, one can do the following</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">NewGeteClass</span> <span class=\"o\">=</span> <span class=\"n\">pycharmm</span><span class=\"o\">.</span><span class=\"n\">script_factory</span><span class=\"p\">(</span><span class=\"s1\">&#39;gete&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">my_gete</span> <span class=\"o\">=</span> <span class=\"n\">NewGeteClass</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">my_gete</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">command</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">required_args</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select", "modulename": "pycharmm.select", "kind": "module", "doc": "<p>Select and manipulate sets of atoms.  </p>\n\n<p>Corresponds to CHARMM command <code>SELEct</code> <br />\nSee <a href=\"https://academiccharmm.org/documentation/version/c47b1/select\">SELEct documentation</a>  </p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>Import module</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.selection</span> <span class=\"k\">as</span> <span class=\"nn\">sel</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.lingo</span> <span class=\"k\">as</span> <span class=\"nn\">lingo</span>\n</code></pre>\n</div>\n\n<p>Select all the hydrogen atoms and store it in a selection called <code>HYD</code></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sel</span><span class=\"o\">.</span><span class=\"n\">store_selection</span><span class=\"p\">(</span><span class=\"s1\">&#39;HYD&#39;</span><span class=\"p\">,</span> <span class=\"n\">sel</span><span class=\"o\">.</span><span class=\"n\">hydrogen</span><span class=\"p\">())</span>\n</code></pre>\n</div>\n\n<p>Check to see if there is a selection saved by the name <code>HYD</code></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sel</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">&#39;HYD&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Obtain <code>COOR STAT</code> on the selection of atoms called <code>HYD</code></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lingo</span><span class=\"o\">.</span><span class=\"n\">charmm_script</span><span class=\"p\">(</span><span class=\"s1\">&#39;coor stat sele HYD end&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.select.or_selection", "modulename": "pycharmm.select", "qualname": "or_selection", "kind": "function", "doc": "<p>Use eltwise logical <code>or</code> to produce a new selection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sel_a</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">sel_b</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.and_selection", "modulename": "pycharmm.select", "qualname": "and_selection", "kind": "function", "doc": "<p>Use eltwise logical <code>and</code> to produce a new selection</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sel_a</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">sel_b</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.not_selection", "modulename": "pycharmm.select", "qualname": "not_selection", "kind": "function", "doc": "<p>Use eltwise logical <code>not</code> to produce a new selection</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sel</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.none_selection", "modulename": "pycharmm.select", "qualname": "none_selection", "kind": "function", "doc": "<p>Get a new selection in which all elements are <code>False</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.all_selection", "modulename": "pycharmm.select", "qualname": "all_selection", "kind": "function", "doc": "<p>get a new selection in which all elements are <code>True</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.by_atom_inds", "modulename": "pycharmm.select", "qualname": "by_atom_inds", "kind": "function", "doc": "<p>Copy selection to new_sel then set new_sel[<code>inds</code>] to <code>True</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">inds</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.by_residue_name", "modulename": "pycharmm.select", "qualname": "by_residue_name", "kind": "function", "doc": "<p>Select all atoms in a residue</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>residue_name</strong> (string):\nname of residue to select</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (boolean tuple):\natom i selected &lt;==&gt; flags[i] == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">residue_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.by_residue_id", "modulename": "pycharmm.select", "qualname": "by_residue_id", "kind": "function", "doc": "<p>Select all atoms in a residue by residue id</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>residue_id</strong> (str):\nCHARMM id of residue to select</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (Selection):\natom i selected &lt;==&gt; flags[i] == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">residue_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.by_segment_id", "modulename": "pycharmm.select", "qualname": "by_segment_id", "kind": "function", "doc": "<p>Select all atoms in a segment.  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>segment_id</strong> (str):\nname of segment to select</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (Selection):\natom i selected &lt;==&gt; flags[i] == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">segment_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.by_atom_type", "modulename": "pycharmm.select", "qualname": "by_atom_type", "kind": "function", "doc": "<p>Select all atoms of type <code>atom_type</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>atom_type</strong> (string):\nIUPAC name of type to select</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (boolean tuple):\natom i selected &lt;==&gt; flags[i] == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atom_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.by_chem_type", "modulename": "pycharmm.select", "qualname": "by_chem_type", "kind": "function", "doc": "<p>Select all atoms of param type code <code>chem_type</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chem_type</strong> (str):\nparameter type code to select</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (boolean tuple):\natom i selected &lt;==&gt; flags[i] == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chem_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.all_atoms", "modulename": "pycharmm.select", "qualname": "all_atoms", "kind": "function", "doc": "<p>Select all atoms.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (boolean tuple):\natom i selected &lt;==&gt; flags[i] == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.no_atoms", "modulename": "pycharmm.select", "qualname": "no_atoms", "kind": "function", "doc": "<p>Select no atoms.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (boolean tuple):\nflags[i] = False for all atoms</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.by_residue_atom", "modulename": "pycharmm.select", "qualname": "by_residue_atom", "kind": "function", "doc": "<p>Select all atoms in single residue with IUPAC name <code>atype</code> in residue with ID <code>resid</code> in a segment with ID <code>segid</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>segid</strong> (str):\nsegment identifier (A1, MAIN, ...)</li>\n<li><strong>resid</strong> (str):\nresidue identifier (1, 23, 45B, ...)</li>\n<li><strong>atype</strong> (str):\nan IUPAC name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (boolean tuple):\natom i selected &lt;==&gt; flags[i] == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">segid</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">resid</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">atype</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.by_point", "modulename": "pycharmm.select", "qualname": "by_point", "kind": "function", "doc": "<p>Selects all atoms within a sphere around point (<code>x</code>,<code>y</code>,<code>z</code>) with radius <code>cut</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (float):\nx coord of selection sphere center</li>\n<li><strong>y</strong> (float):\ny coord of selection sphere center</li>\n<li><strong>z</strong> (float):\nz coord of selection sphere center</li>\n<li><strong>cut</strong> (float, default = 8.0):\nradius of selection sphere</li>\n<li><strong>periodic</strong> (bool, default = False):\nif simple periodic boundary conditions are in effect\nthrough the use of the MIPB command,\nthe selection reflects the appropriate periodic boundaries</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (boolean tuple):\natom i selected &lt;==&gt; flags[i] == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">cut</span><span class=\"o\">=</span><span class=\"mf\">8.0</span>, </span><span class=\"param\"><span class=\"n\">periodic</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.is_hydrogen", "modulename": "pycharmm.select", "qualname": "is_hydrogen", "kind": "function", "doc": "<p>True if atom <code>i</code> is hydrogen</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>i</strong> (integer):\nindex of atom to test</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>answer</strong> (bool):\natom i is hydrogen &lt;==&gt; answer == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.is_lone", "modulename": "pycharmm.select", "qualname": "is_lone", "kind": "function", "doc": "<p>True if atom <code>i</code> is a lonepair</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>i</strong> (integer):\nindex of atom to test</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>answer</strong> (bool):\natom i is a lonepair &lt;==&gt; answer == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.is_initial", "modulename": "pycharmm.select", "qualname": "is_initial", "kind": "function", "doc": "<p>True if atom <code>i</code> has known coords</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>i</strong> (integer):\nindex of atom to test</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>answer</strong> (bool):\natom <code>i</code> has known coords &lt;==&gt; answer == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.hydrogen", "modulename": "pycharmm.select", "qualname": "hydrogen", "kind": "function", "doc": "<p>Selects all hydrogen atoms</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (boolean tuple):\natom <code>i</code> hydrogen &lt;==&gt; flags[i] == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.initial", "modulename": "pycharmm.select", "qualname": "initial", "kind": "function", "doc": "<p>Selects all atoms with known coords</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (boolean tuple):\natom <code>i</code> has known coords &lt;==&gt; flags[i] == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.lone", "modulename": "pycharmm.select", "qualname": "lone", "kind": "function", "doc": "<p>Selects all lonepair atoms</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (boolean tuple):\natom <code>i</code> lonepair &lt;==&gt; flags[i] == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.get_property", "modulename": "pycharmm.select", "qualname": "get_property", "kind": "function", "doc": "<p>Return array filled with <code>natoms</code> numeric property <em>prop</em></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prop_name</strong> (str):\nidentifier for numeric property of atoms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>prop_vals</strong> (numeric list):\nnumeric value for each atom i representing <em>prop</em></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prop_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.prop", "modulename": "pycharmm.select", "qualname": "prop", "kind": "function", "doc": "<p>Select all atoms for which <code>func(tol, prop_val)</code> is True</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prop_name</strong> (str):\nidentifier for numeric property of atoms</li>\n<li><strong>func</strong> (function):\nof two arguments, <code>func(tol, prop_val)</code></li>\n<li><strong>tol</strong> (float):\ntolerance to pass to func as first argument</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (boolean tuple):\natom <code>i</code> selected &lt;==&gt; flags[i] == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prop_name</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">tol</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.residues", "modulename": "pycharmm.select", "qualname": "residues", "kind": "function", "doc": "<p>Select all atoms in a range of residues</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>resname_a</strong> (str):\nname of first residue in range</li>\n<li><strong>resname_b</strong> (str, default = ''):\nname of last residue in range</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (boolean tuple):\nflags[i] == True means that atom <code>i</code> is selected</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">resname_a</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">resname_b</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.segments", "modulename": "pycharmm.select", "qualname": "segments", "kind": "function", "doc": "<p>Select all atoms in a range of segments</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>segid_a</strong> (str):\nname of first segment in range</li>\n<li><strong>segid_b</strong> (str, default = ''):\nname of last segment in range</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (boolean tuple):\nflags[i] == True means that atom <code>i</code> is selected</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">segid_a</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">segid_b</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.whole_residues", "modulename": "pycharmm.select", "qualname": "whole_residues", "kind": "function", "doc": "<p>select the whole residue of each atom in a selection</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>sel : Selection\n    selection of atoms, each atom's whole residue will be selected</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>boolean tuple</strong>: a new selection of residues</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sel</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.around", "modulename": "pycharmm.select", "qualname": "around", "kind": "function", "doc": "<p>Select all atoms within <code>r_cut</code> of the current selection</p>\n\n<p>This is equivalent to CHARMM's \".around.\" command.\nImplemented as a linked-list cell algorithm.\nMore information at: <a href=\"https://doi.org/10.1017/CBO9780511816581\">https://doi.org/10.1017/CBO9780511816581</a> \nand ISBN: 9780122673511</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sel</strong> (Selection):\natoms around which a selection of atoms is desired</li>\n<li><strong>r_cut</strong> (float):\nSelection cut-off</li>\n</ul>\n\n<h6 id=\"raise\">Raise</h6>\n\n<p>ValueError if <code>r_cut</code> is 0 angstroms or less</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>boolean tuple</strong>: Essentially a new <code>SelectAtoms</code> object is returned. It contains the new selection. <strong>The new selection includes the current selection.</strong></li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select all water molecules that are 2.8 angstroms from the protein</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">example_sel</span> <span class=\"o\">=</span> <span class=\"n\">pycharmm</span><span class=\"o\">.</span><span class=\"n\">SelectAtoms</span><span class=\"p\">(</span><span class=\"n\">segid</span><span class=\"o\">=</span><span class=\"s2\">&quot;TIP3&quot;</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">pycharmm</span><span class=\"o\">.</span><span class=\"n\">SelectAtoms</span><span class=\"p\">(</span><span class=\"n\">segid</span><span class=\"o\">=</span><span class=\"s2\">&quot;PROTEIN&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">around</span><span class=\"p\">(</span><span class=\"mf\">2.8</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sel</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">r_cut</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.get_max_name", "modulename": "pycharmm.select", "qualname": "get_max_name", "kind": "function", "doc": "<p>Ask CHARMM for the max len of the name of a stored selection.  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>max_name</strong> (int):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.get_num_stored", "modulename": "pycharmm.select", "qualname": "get_num_stored", "kind": "function", "doc": "<p>Ask CHARMM for the number of stored selections</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>num_stored</strong> (int):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.find", "modulename": "pycharmm.select", "qualname": "find", "kind": "function", "doc": "<p>Get the index of the named stored selection</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.store_selection", "modulename": "pycharmm.select", "qualname": "store_selection", "kind": "function", "doc": "<p>Store selection in CHARMM as <code>name</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong> (str):\nName to be assigned to the stored selection</li>\n<li><strong>sel</strong> (boolean tuple):\nSelection of atoms</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>name</strong> (str):\nSame as the <code>name</code> in Parameters</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<p>In CHARMM, one can name a selection in the following way</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">DEFIne</span> <span class=\"n\">sel1</span> <span class=\"n\">select</span> <span class=\"nb\">type</span> <span class=\"n\">C</span> <span class=\"n\">end</span>\n</code></pre>\n</div>\n\n<p>The equivalent in pycharmm, using the store_selection function, can be\naccomplished using the following lines</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.selection</span> <span class=\"k\">as</span> <span class=\"nn\">sel</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sel</span><span class=\"o\">.</span><span class=\"n\">store_selection</span><span class=\"p\">(</span><span class=\"s1\">&#39;sel1&#39;</span><span class=\"p\">,</span> <span class=\"n\">sel</span><span class=\"o\">.</span><span class=\"n\">by_atom_type</span><span class=\"p\">(</span><span class=\"s1\">&#39;C&#39;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sel</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.get_stored_names", "modulename": "pycharmm.select", "qualname": "get_stored_names", "kind": "function", "doc": "<p>Get a list of all the names of the selections stored in CHARMM</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>string list</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.delete_stored_selection", "modulename": "pycharmm.select", "qualname": "delete_stored_selection", "kind": "function", "doc": "<p>Remove the named selection from CHARMM  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Name of the stored selection asked for removal</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select.by_atom_num", "modulename": "pycharmm.select", "qualname": "by_atom_num", "kind": "function", "doc": "<p>Select atoms of index number</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>num</strong> (int):\natom number</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (boolean tuple):\natom <code>i</code> selected &lt;==&gt; flags[i] == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms", "modulename": "pycharmm.select_atoms", "kind": "module", "doc": "<p>Functions for selecting atoms in a structure </p>\n\n<p>Corresponds to CHARMM command <code>SELEction</code></p>\n\n<p>See CHARMM documentation <a href=\"https://academiccharmm.org/documentation/version/c47b1/select\">select</a>\nfor more information</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm</span>\n</code></pre>\n</div>\n\n<p>Select all atoms in a protein, whose segment ID is PROT</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sele_prot</span> <span class=\"o\">=</span> <span class=\"n\">pycharmm</span><span class=\"o\">.</span><span class=\"n\">SelectAtoms</span><span class=\"p\">(</span><span class=\"n\">seg_id</span><span class=\"o\">=</span><span class=\"s1\">&#39;PROT&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Select all CA atoms</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sele_ca</span> <span class=\"o\">=</span> <span class=\"n\">pycharmm</span><span class=\"o\">.</span><span class=\"n\">SelectAtoms</span><span class=\"p\">(</span><span class=\"n\">atom_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;CA&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Select all CA atoms of the protein</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sele_prot_ca</span> <span class=\"o\">=</span> <span class=\"n\">sele_prot</span> <span class=\"o\">&amp;</span> <span class=\"n\">sele_ca</span>\n</code></pre>\n</div>\n\n<p>Save the above selection in CHARMM with name prot_ca. \nThis is similar to CHARMM command:</p>\n\n<p><code>define prot_ca sele segid PROT .and. type CA end</code></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sele_prot_ca</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"s1\">&#39;prot_ca&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>For segments ALAD and GLAD, select all atoms whose residue IDs \nare either 1 or 2, and whose atom names are either N or CA</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atoms</span> <span class=\"o\">=</span> <span class=\"n\">pycharmm</span><span class=\"o\">.</span><span class=\"n\">SelectAtoms</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">by_res_and_type</span><span class=\"p\">(</span><span class=\"s1\">&#39;ALAD GLAD&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;1 2&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;N CA&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.select_atoms.SelectAtoms", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.__init__", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>selection</strong> (bool tuple):\nA boolean tuple whose length is the number of atoms\nin the system. True if the corresponding atom is selected.</li>\n<li><strong>select_all</strong> (bool):\nTrue for selecting all atoms</li>\n<li><strong>seg_id</strong> (str):\nsegment ID of the selection</li>\n<li><strong>res_id</strong> (str):\nresidue ID of the selection</li>\n<li><strong>res_name</strong> (str):\nresidue name of the selection</li>\n<li><strong>atom_nums</strong> (int or list of int):\natom index, i.e., atom number</li>\n<li><strong>atom_type</strong> (str):\natom names of the selection</li>\n<li><strong>chem_type</strong> (str):\nchemical type of the selection</li>\n<li><strong>initials</strong> (bool):\nTrue for selecting all atoms with known coordinates</li>\n<li><strong>lonepairs</strong> (bool):\nTrue for selecting all lone pairs</li>\n<li><strong>hydrogens</strong> (bool):\nTrue for selecting all hydrogen atoms</li>\n<li><strong>update</strong> (bool):\nTrue for updating the selection</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">selection</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">select_all</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">seg_id</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">res_id</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">res_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">atom_nums</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">atom_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">chem_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">initials</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">lonepairs</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">hydrogens</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">update</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.get_selection", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.get_selection", "kind": "function", "doc": "<p>For a pycharmm selection, return a boolean tuple, whose length\nis the number of atoms in the system.</p>\n\n<p>True if an atom is in the selection, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.set_selection", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.set_selection", "kind": "function", "doc": "<p>For a pycharmm selection, update it based on the input boolean tuple.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>selection</strong> (boolean tuple):\nLength of the tuple is equal to the number of atoms in the system</p>\n\n<p>True if an atom is in the selection, otherwise False.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">selection</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.by_seg_id", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.by_seg_id", "kind": "function", "doc": "<p>Select by segment ID</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>seg_id</strong> (str):\nsegment ID</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seg_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.by_res_id", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.by_res_id", "kind": "function", "doc": "<p>Select by residue ID</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>res_id</strong> (str):\nresidue ID</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">res_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.by_res_name", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.by_res_name", "kind": "function", "doc": "<p>Select by residue name</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>res_name</strong> (str):\nresidue name</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">res_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.by_chem_type", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.by_chem_type", "kind": "function", "doc": "<p>Select by chemical type </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chem_type</strong> (str):\nchemical type</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chem_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.by_atom_nums", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.by_atom_nums", "kind": "function", "doc": "<p>Select by atom index </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>atom_nums</strong> (list of int):\natom index, i.e., atom number </p>\n\n<p>Note that atom index starts from 0</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">atom_nums</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.by_atom_type", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.by_atom_type", "kind": "function", "doc": "<p>Select by atom name</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>atom_type</strong> (str):\natom name</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">atom_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.in_sphere", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.in_sphere", "kind": "function", "doc": "<p>Select all atoms within a sphere around point (x,y,z) with a certain radius.</p>\n\n<p>Corresponds to CHARMM command <code>sele point</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (float):\nx coordinate of the reference point</li>\n<li><strong>y</strong> (float):\ny coordinate of the reference point</li>\n<li><strong>z</strong> (float):\nz coordinate of the reference point</li>\n<li><strong>radius</strong> (float):\nradius of the shpere around a given point</li>\n<li><strong>is_periodic</strong> (bool):\nIf True AND simple periodic boundary conditions are in effect\nthrough the use of the MIPB command, the selection reflects\nthe appropriate periodic boundaries.\nsee <a href=\"https://academiccharmm.org/documentation/version/c47b1/images/\">images</a></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">z</span>, </span><span class=\"param\"><span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"mf\">0.8</span>, </span><span class=\"param\"><span class=\"n\">is_periodic</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.by_res_and_type", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.by_res_and_type", "kind": "function", "doc": "<p>Select multiple segments, resids and atom types. Specifically,\nfor all segments whose names are in <code>seg_id</code>, select all atoms whose\nresidue IDs are in <code>res_id</code> and whose atom names are in <code>atom_type</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>seg_id</strong> (string):\nstring of segment identifiers ('A1 MAIN SEG1 ... SEGn')</li>\n<li><strong>res_id</strong> (string):\nstring of residue identifiers ('1 3 5 6 ...n')</li>\n<li><strong>atom_type</strong> (string):\nstring of an IUPAC names ('C CA CB N S')</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>flags</strong> (boolean list):\natom i selected &lt;==&gt; flags[i] == True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seg_id</span>, </span><span class=\"param\"><span class=\"n\">res_id</span>, </span><span class=\"param\"><span class=\"n\">atom_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.all_atoms", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.all_atoms", "kind": "function", "doc": "<p>Select all atoms in the system</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.all_initial_atoms", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.all_initial_atoms", "kind": "function", "doc": "<p>Select all atoms with known coordinates</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.all_lonepair_atoms", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.all_lonepair_atoms", "kind": "function", "doc": "<p>Select all lonepairs</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.all_hydrogen_atoms", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.all_hydrogen_atoms", "kind": "function", "doc": "<p>Select all hydrogen atoms</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.by_property", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.by_property", "kind": "function", "doc": "<p>Select based on atom properties</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">prop_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">tol</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.around", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.around", "kind": "function", "doc": "<p>Finds all atoms within a <code>radius</code> around the atoms specified\nin the selection</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">radius</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.whole_residues", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.whole_residues", "kind": "function", "doc": "<p>Select by residues as a whole</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.as_ctypes", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.as_ctypes", "kind": "function", "doc": "<p>For a pycharmm selection, convert it to a selection \nfor lib.charmm to use</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.is_selected", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.is_selected", "kind": "function", "doc": "<p>Check if an atom is in a pycharmm selection</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>atom_index</strong> (int):\natom index</p>\n\n<p>Note that atom index starts from 0</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>is_sel_i</strong> (bool):\nTrue if the atom is in the pycharmm selection</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">atom_index</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.is_stored", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.is_stored", "kind": "function", "doc": "<p>Check if a pycharmm selection has been stored in CHARMM</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>self._stored</strong> (bool):\nTrue if a pycharmm selection has been stored in CHARMM with\na name</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.get_stored_name", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.get_stored_name", "kind": "function", "doc": "<p>Get the name of the pycharmm selection in CHARMM</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>name</strong> (str):\nname of the pycharmm selection in CHARMM</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.store", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.store", "kind": "function", "doc": "<p>Save the pycharmm selection to CHARMM </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong> (str):\nname of pycharmm selection in CHARMM</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.unstore", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.unstore", "kind": "function", "doc": "<p>Unstore/remove the named pycharmm selection in CHARMM</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>was_stored</strong> (old store status):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.get_atom_indexes", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.get_atom_indexes", "kind": "function", "doc": "<p>Get a list of atom indexes for selected atoms.</p>\n\n<p>Note that atom index starts from 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.get_n_selected", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.get_n_selected", "kind": "function", "doc": "<p>Get number of selected atoms</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.get_chem_types", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.get_chem_types", "kind": "function", "doc": "<p>Get a list of chemical types (based on the topology file)\nfor selected atoms</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.get_res_indexes", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.get_res_indexes", "kind": "function", "doc": "<p>Get a list of residue indexes for selected atoms.</p>\n\n<p>Note that residue index starts from 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.get_res_names", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.get_res_names", "kind": "function", "doc": "<p>Get a list of residue names for selected atoms</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.get_res_ids", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.get_res_ids", "kind": "function", "doc": "<p>Get a list of residue IDs for selected atoms</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.get_seg_indexes", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.get_seg_indexes", "kind": "function", "doc": "<p>Get a list of segment indexes for selected atoms</p>\n\n<p>Note that segment index starts from 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.get_seg_ids", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.get_seg_ids", "kind": "function", "doc": "<p>Get a list of segment IDs for selected atoms</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtoms.get_atom_types", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtoms.get_atom_types", "kind": "function", "doc": "<p>Get a list of atom names for selected atoms</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.select_atoms.SelectAtomsIterator", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtomsIterator", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycharmm.select_atoms.SelectAtomsIterator.__init__", "modulename": "pycharmm.select_atoms", "qualname": "SelectAtomsIterator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">select_atoms</span></span>)</span>"}, {"fullname": "pycharmm.settings", "modulename": "pycharmm.settings", "kind": "module", "doc": "<p>Functions to change CHARMM print level (<code>PRNLev</code>), warning level (<code>WRNLev</code>) \nand bomb level (<code>BOMBlev</code>)</p>\n\n<p>See CHARMM documentation <a href=\"https://academiccharmm.org/documentation/version/c47b1/miscom\">miscom</a>\nfor more information</p>\n\n<h1 id=\"functions\">Functions</h1>\n\n<ul>\n<li><code>set_verbosity</code> -- set the CHARMM library's verbosity level</li>\n<li><code>set_warn_level</code> -- set the CHARMM library's warning level</li>\n<li><code>set_bomb_level</code> -- set the CHARMM library's bomb level</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.settings</span> <span class=\"k\">as</span> <span class=\"nn\">settings</span>\n</code></pre>\n</div>\n\n<p>The following command is equivalent to CHARMM command <code>PRNLev 0</code></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">set_verbosity</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.settings.set_verbosity", "modulename": "pycharmm.settings", "qualname": "set_verbosity", "kind": "function", "doc": "<p>change verbosity of CHARMM library</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>level</strong> (int):\nthe new verbosity level desired</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_level</strong> (int):\nold verbosity level</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.settings.set_warn_level", "modulename": "pycharmm.settings", "qualname": "set_warn_level", "kind": "function", "doc": "<p>change CHARMM's warning level</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>level</strong> (int):\nthe new warning level desired</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_level</strong> (int):\nold warning level</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.settings.set_bomb_level", "modulename": "pycharmm.settings", "qualname": "set_bomb_level", "kind": "function", "doc": "<p>change CHARMM's bomb level</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>level</strong> (int):\nthe new bomb level desired</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>old_level</strong> (int):\nold bomb level</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.shake", "modulename": "pycharmm.shake", "kind": "module", "doc": "<p>Functions to configure SHAKE constraints.   </p>\n\n<p>Corresponds to CHARMM command <code>SHAKe</code> <br />\nSee <a href=\"https://academiccharmm.org/documentation/version/c47b1/cons#SHAKE\">SHAKE documentation</a></p>\n"}, {"fullname": "pycharmm.shake.off", "modulename": "pycharmm.shake", "qualname": "off", "kind": "function", "doc": "<p>Turn off SHAKE.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if successful.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.shake.on", "modulename": "pycharmm.shake", "qualname": "on", "kind": "function", "doc": "<p>Configure and turn on SHAKE constraints for the selected atoms</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>islct</strong> (list[int]):\nislct(i) &amp; jslct(j) .eq. 1 &lt;=&gt; constrain bond/angle btn atoms i &amp; j</li>\n<li><strong>jslct</strong> (list[int]):\nsee islct</li>\n<li><strong>comparison</strong> (bool):\nconstrain the comparison set instead of the main set</li>\n<li><strong>param</strong> (bool):\nuse bond dists from param table instead of current coords</li>\n<li><strong>fast</strong> (bool):\nuse vector parallel algorithm with diff assumptions</li>\n<li><strong>water</strong> (string):\nname of the water residue for the shake fast algorithm</li>\n<li><strong>tol</strong> (float, default = 1e-10):\nallowed relative deviations from the reference values</li>\n<li><strong>maxiter</strong> (int, default = 500):\nmax iterations SHAKE tries before giving up</li>\n<li><strong>scale</strong> (float, default = 1.0):\nconvergence scale factor for SHAKEA</li>\n<li><strong>bonh</strong> (bool, default = False):\nall bonds involving hydrogens are fixed</li>\n<li><strong>bond</strong> (bool, default = False):\nall bonds are fixed</li>\n<li><strong>angh</strong> (bool, default = False):\nall angles involving hydrogen are fixed</li>\n<li><strong>angl</strong> (bool, default = False):\nall angles are fixed if</li>\n<li><strong>noreset</strong> (bool, default = False):\ndo not reset counters to 0 during setup</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if successful.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">islct</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">jslct</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">comparison</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">param</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fast</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">water</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span>,</span><span class=\"param\">\t<span class=\"n\">maxiter</span><span class=\"o\">=</span><span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">bonh</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">bond</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">angh</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">angl</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">noreset</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.write", "modulename": "pycharmm.write", "kind": "module", "doc": "<p>Functions to write coordinate and psf files to disk</p>\n\n<p>Corresponds to CHARMM command <code>WRITe</code></p>\n\n<p>See CHARMM documentation <a href=\"https://academiccharmm.org/documentation/version/c47b1/io#Write\">WRITe</a>\nfor more information</p>\n\n<h1 id=\"functions\">Functions</h1>\n\n<ul>\n<li><code>coor_pdb</code> -- write a coordinate file in pdb format to disk</li>\n<li><code>coor_card</code> -- write a CHARMM coordinate file to disk</li>\n<li><code>psf_card</code> -- write a psf file to disk</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pycharmm.write</span> <span class=\"k\">as</span> <span class=\"nn\">write</span>\n</code></pre>\n</div>\n\n<p>Write PSF to a file named protein.psf</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">write</span><span class=\"o\">.</span><span class=\"n\">psf_card</span><span class=\"p\">(</span><span class=\"s1\">&#39;protein.psf&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Write coordinates to a PDB file named out.pdb</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">write</span><span class=\"o\">.</span><span class=\"n\">coor_pdb</span><span class=\"p\">(</span><span class=\"s1\">&#39;out.pdb&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Write coordinates to a CHARMM coordinate file named out.crd</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">write</span><span class=\"o\">.</span><span class=\"n\">coor_card</span><span class=\"p\">(</span><span class=\"s1\">&#39;out.crd&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "pycharmm.write.coor_pdb", "modulename": "pycharmm.write", "qualname": "coor_pdb", "kind": "function", "doc": "<p>write a coordinate set to a pdb file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):\nnew file path to write</li>\n<li><strong>title</strong> (str):\ntitle to write at the beginning of the file</li>\n<li><strong>**kwargs</strong> (dict):\nextra settings to pass to the CHARMM command</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.write.coor_card", "modulename": "pycharmm.write", "qualname": "coor_card", "kind": "function", "doc": "<p>write a coordinate set to a CHARMM card *.chr format file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):\nnew file path to write</li>\n<li><strong>title</strong> (str):\ntitle to write at the beginning of the file</li>\n<li><strong>**kwargs</strong> (dict):\nextra settings to pass to the CHARMM command</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycharmm.write.psf_card", "modulename": "pycharmm.write", "qualname": "psf_card", "kind": "function", "doc": "<p>write psf details in card format to a file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):\nnew file path to write</li>\n<li><strong>title</strong> (str):\ntitle to write at the beginning of the file</li>\n<li><strong>**kwargs</strong> (dict):\nextra settings to pass to the CHARMM command</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();